
(function() {
	'use strict';

	angular.module('myApp', ['ngStorage', 'ngRoute', 'ngResource', 'ngMessages', 'ui.bootstrap',
			'ui.mask', 'toaster', 'ngAnimate', 'ngCookies', 'ngCpfCnpj', 'base64', 'checklist-model'])
		.config(config)
		.run(run);

		run.$inject = ['$rootScope', '$localStorage', '$location'];
		function run($rootScope, $localStorage, $location){
			$rootScope.$on('$routeChangeStart', function (event, next, current){
				if(next.authorize){
					if(!$localStorage.token){
                        $rootScope.$evalAsync(function () {
                            $location.path('/login');
                        });
					}
				}
			});
		}

		config.$inject = ['$routeProvider'];
		function config($routeProvider){
		
			function teste(){
				console.log("teste");
			}
	

			/* Clientes */
			$routeProvider.when('/clientes',{
				templateUrl: 'partials/cliente/listaCliente.html',
				controller: 'listaClienteController as controller',
				authorize: true
			});
			$routeProvider.when('/cliente',{
				templateUrl: 'partials/cliente/formCliente.html',
				controller: 'formClienteController as controller',
				authorize: true
			});
			$routeProvider.when('/cliente/:clienteId',{
				templateUrl: 'partials/cliente/formCliente.html',
				controller: 'formClienteController as controller',
				authorize: true
			});
			$routeProvider.when('/cliente/view/:clienteId',{
				templateUrl: 'partials/cliente/viewCliente.html',
				controller: 'formClienteController as controller',
				authorize: true
			});

			/* Tipo Máquina */
			$routeProvider.when('/tiposMaquinas',{
				templateUrl: 'partials/tipoMaquina/listaTipoMaquina.html',
				controller: 'listaTipoMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoMaquina',{
				templateUrl: 'partials/tipoMaquina/formTipoMaquina.html',
				controller: 'formTipoMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoMaquina/:tipoMaquinaId',{
				templateUrl: 'partials/tipoMaquina/formTipoMaquina.html',
				controller: 'formTipoMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoMaquina/view/:tipoMaquinaId',{
				templateUrl: 'partials/tipoMaquina/viewTipoMaquina.html',
				controller: 'formTipoMaquinaController as controller',
                authorize: true
			});

			/* Limite Máquina */
			$routeProvider.when('/limitesMaquinas',{
				templateUrl: 'partials/limiteMaquina/listaLimiteMaquina.html',
				controller: 'listaLimiteMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/limiteMaquina',{
				templateUrl: 'partials/limiteMaquina/formLimiteMaquina.html',
				controller: 'formLimiteMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/limiteMaquina/:limiteMaquinaId',{
				templateUrl: 'partials/limiteMaquina/formLimiteMaquina.html',
				controller: 'formLimiteMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/limiteMaquina/view/:limiteMaquinaId',{
				templateUrl: 'partials/limiteMaquina/viewLimiteMaquina.html',
				controller: 'formLimiteMaquinaController as controller',
                authorize: true
			});

			/* Sistema de Segurança */
			$routeProvider.when('/sistemasSeguranca',{
				templateUrl : 'partials/sistemaSeguranca/listaSistemaSeguranca.html',
				controller : 'listaSistemaSegurancaController as controller',
                authorize: true
			});
			$routeProvider.when('/sistemaSeguranca',{
				templateUrl: 'partials/sistemaSeguranca/formSistemaSeguranca.html',
				controller: 'formSistemaSegurancaController as controller',
                authorize: true
			});
			$routeProvider.when('/sistemaSeguranca/:sistemaSegurancaId',{
				templateUrl: 'partials/sistemaSeguranca/formSistemaSeguranca.html',
				controller: 'formSistemaSegurancaController as controller',
                authorize: true
			});
			$routeProvider.when('/sistemaSeguranca/view/:sistemaSegurancaId',{
				templateUrl: 'partials/sistemaSeguranca/viewSistemaSeguranca.html',
				controller: 'formSistemaSegurancaController as controller',
                authorize: true
			});

			/* Perigos */
			$routeProvider.when('/perigos', {
				templateUrl : 'partials/perigo/listaPerigo.html',
				controller : 'listaPerigoController as controller',
                authorize: true
			});
			$routeProvider.when('/perigo',{
				templateUrl: 'partials/perigo/formPerigo.html',
				controller: 'formPerigoController as controller',
                authorize: true
			});
			$routeProvider.when('/perigo/:perigoId',{
				templateUrl: 'partials/perigo/formPerigo.html',
				controller: 'formPerigoController as controller',
                authorize: true
			});
			$routeProvider.when('/perigo/view/:perigoId',{
				templateUrl: 'partials/perigo/viewPerigo.html',
				controller: 'formPerigoController as controller',
                authorize: true
			});

			/* Riscos */
			$routeProvider.when('/riscos',{
				templateUrl : 'partials/risco/listaRisco.html',
				controller : 'listaRiscoController as controller',
                authorize: true
			});
			$routeProvider.when('/risco',{
				templateUrl: 'partials/risco/formRisco.html',
				controller: 'formRiscoController as controller',
                authorize: true
			});
			$routeProvider.when('/risco/:riscoId',{
				templateUrl: 'partials/risco/formRisco.html',
				controller: 'formRiscoController as controller',
                authorize: true
			});
			$routeProvider.when('/risco/view/:riscoId',{
				templateUrl: 'partials/risco/viewRisco.html',
				controller: 'formRiscoController as controller',
                authorize: true
			});

			/* Normas*/
			$routeProvider.when('/itens',{
				templateUrl: 'partials/normaReg/listaItem.html',
				controller: 'listaNormaRegController as controller',
                authorize: true
			});
			$routeProvider.when('/item',{
				templateUrl: 'partials/normaReg/formItem.html',
				controller: 'formNormaRegController as controller',
                authorize: true
			});
			$routeProvider.when('/item/:itemId',{
				templateUrl: 'partials/normaReg/formItem.html',
				controller: 'formNormaRegController as controller',
                authorize: true
			});
				$routeProvider.when('/item/view/:itemId',{
				templateUrl: 'partials/normaReg/viewItem.html',
				controller: 'formNormaRegController as controller',
                authorize: true
			});

			/*Lista Norma*/
			$routeProvider.when('/normasTecnicas',{
				templateUrl: 'partials/normaTecnica/listaNormaTecnica.html',
				controller: 'listaNormaTecnicaController as controller',
                authorize: true
			});
			$routeProvider.when('/normaTecnica',{
				templateUrl: 'partials/normaTecnica/formNormaTecnica.html',
				controller: 'formNormaTecnicaController as controller',
                authorize: true
			});
			$routeProvider.when('/normaTecnica/:normaTecnicaId',{
				templateUrl: 'partials/normaTecnica/formNormaTecnica.html',
				controller: 'formNormaTecnicaController as controller',
                authorize: true
			});
				$routeProvider.when('/normaTecnica/view/:normaTecnicaId',{
				templateUrl: 'partials/normaTecnica/viewNormaTecnica.html',
				controller: 'formNormaTecnicaController as controller',
                authorize: true
			});

			/* Capacitacao */
			$routeProvider.when('/capacitacoes',{
				templateUrl: 'partials/capacitacao/listaCapacitacao.html',
				controller: 'listaCapacitacaoController as controller',
                authorize: true
			});
			$routeProvider.when('/capacitacao',{
				templateUrl: 'partials/capacitacao/formCapacitacao.html',
				controller: 'formCapacitacaoController as controller',
                authorize: true
			});
			$routeProvider.when('/capacitacao/:capacitacaoId',{
				templateUrl: 'partials/capacitacao/formCapacitacao.html',
				controller: 'formCapacitacaoController as controller',
                authorize: true
			});
			$routeProvider.when('/capacitacao/view/:capacitacaoId',{
				templateUrl: 'partials/capacitacao/viewCapacitacao.html',
				controller: 'formCapacitacaoController as controller',
                authorize: true
			});

			/* Usuarios */
			$routeProvider.when('/usuarios',{
				templateUrl: 'partials/usuario/listaUsuario.html',
				controller: 'listaUsuarioController as controller',
                authorize: false
			});
			$routeProvider.when('/usuario',{
				templateUrl: 'partials/usuario/formUsuario.html',
				controller: 'formUsuarioController as controller',
                authorize: false
			});
			$routeProvider.when('/usuario/password',{
				templateUrl: 'partials/usuario/formPassword.html',
				controller: 'passwordController as controller',
                authorize: false
			});
			$routeProvider.when('/usuario/:usuarioId',{
				templateUrl: 'partials/usuario/formUsuario.html',
				controller: 'formUsuarioController as controller',
                authorize: false
			});
			$routeProvider.when('/usuario/view/:usuarioId',{
				templateUrl: 'partials/usuario/viewUsuario.html',
				controller: 'formUsuarioController as controller',
                authorize: false
			});
			$routeProvider.when('/login',{
				templateUrl: 'partials/login.html',
				controller: 'loginController as controller',
				authorize: false
			});


			/* Laudos */
			$routeProvider.when('/laudos',{
				templateUrl: 'partials/laudo/listaLaudo.html',
				controller: 'listaLaudoController as controller',
                authorize: true
			});
			$routeProvider.when('/laudo',{
				templateUrl: 'partials/laudo/formLaudo.html',
				controller: 'formLaudoController as controller',
                authorize: true
			});
			$routeProvider.when('/laudo/:laudoId',{
				templateUrl: 'partials/laudo/formLaudo.html',
				controller: 'formLaudoController as controller',
                authorize: true
			});
			$routeProvider.when('/laudo/view/:laudoId',{
				templateUrl: 'partials/laudo/viewLaudo.html',
				controller: 'formLaudoController as controller',
                authorize: true
			});

			/* Maquinas */
			$routeProvider.when('/maquinas',{
				templateUrl: 'partials/maquina/listaMaquina.html',
				controller: 'listaMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/maquina',{
				templateUrl: 'partials/maquina/formMaquina.html',
				controller: 'formMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/maquina/:maquinaId',{
				templateUrl: 'partials/maquina/formMaquina.html',
				controller: 'formMaquinaController as controller',
                authorize: true
			});
			$routeProvider.when('/maquina/view/:maquinaId',{
				templateUrl: 'partials/maquina/viewMaquina.html',
				controller: 'formMaquinaController as controller',
                authorize: true
			});

			/* Portaria */
			$routeProvider.when('/portarias',{
				templateUrl: 'partials/portaria/viewPortaria.html',
				controller: 'listaPortariaController as controller',
                authorize: true
			});
			$routeProvider.when('/portaria',{
				templateUrl: 'partials/portaria/formPortaria.html',
				controller: 'formPortariaController as controller',
                authorize: true
			});

			/* Disposições Finais */
			$routeProvider.when('/disposicoesFinais',{
				templateUrl: 'partials/disposicoesFinais/viewDisposicoesFinais.html',
				controller: 'listaDisposicoesFinaisController as controller',
                authorize: true
			});
			$routeProvider.when('/disposicaoFinal',{
				templateUrl: 'partials/disposicoesFinais/formDisposicoesFinais.html',
				controller: 'formDisposicoesFinaisController as controller',
                authorize: true
			});

			/* Dispositivos */
			$routeProvider.when('/dispositivos',{
				templateUrl: 'partials/dispositivo/viewDispositivo.html',
				controller: 'listaDispositivoController as controller',
                authorize: true
			});
			$routeProvider.when('/dispositivo',{
				templateUrl: 'partials/dispositivo/formDispositivo.html',
				controller: 'formDispositivoController as controller',
                authorize: true
			});

			/*REsponsabilidade Tecnica*/
			$routeProvider.when('/respTecnicas',{
				templateUrl: 'partials/respTecnica/viewRespTecnica.html',
				controller: 'listaRespTecnicaController as controller',
                authorize: true
			});

			$routeProvider.when('/respTecnica',{
				templateUrl: 'partials/respTecnica/formRespTecnica.html',
				controller: 'formRespTecnicaController as controller',
                authorize: true
			});

			/* Questionarios Dispositivos */
			$routeProvider.when('/tiposDispositivos',{ // Lista
				templateUrl: 'partials/tipoDispositivos/listaTipoDispositivo.html',
				controller: 'listaTipoDispositivoController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoDispositivo',{ // formulario cadastro
				templateUrl: 'partials/tipoDispositivos/formTipoDispositivo.html',
				controller: 'formTipoDispositivoController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoDispositivo/:tipoDispositivoId',{ // formulario cadastro edit
				templateUrl: 'partials/tipoDispositivos/formTipoDispositivo.html',
				controller: 'formTipoDispositivoController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoDispositivo/:tipoDispositivoId/perguntas',{ // lista as perguntas do tipo dispositivo
				templateUrl: 'partials/tipoDispositivos/listaQuestionario.html',
				controller: 'listaQuestionarioController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoDispositivo/:tipoDispositivoId/pergunta',{ // formulario cadastro pergunta
				templateUrl: 'partials/tipoDispositivos/formPergunta.html',
				controller: 'formPerguntaController as controller',
                authorize: true
			});
			$routeProvider.when('/tipoDispositivo/:tipoDispositivoId/pergunta/:perguntaId',{ // formulario cadastro pergunta
				templateUrl: 'partials/tipoDispositivos/formPergunta.html',
				controller: 'formPerguntaController as controller',
                authorize: true
			});


			/*Tipo de Dispositivo*/
			// $routeProvider.when('/tipoDispositivos',{
			// 	templateUrl: 'partials/tipoMaquina/listaTipoMaquina.html',
			// 	controller: 'listaTipoDispositivoController as controller'
			// });
			// $routeProvider.when('/tipoDispositivo',{
			// 	templateUrl: 'partials/tipoMaquina/formTipoMaquina.html',
			// 	controller: 'formTipoDispositivoController as controller'
			// });

			/* Home */
			$routeProvider.when('/home',{
				templateUrl: 'partials/home.html',
				controller: 'HomeController as controller',
				authorize: true
			});

			$routeProvider.otherwise({redirectTo: '/home'});
	}

})();

(function(){
	'use strict';

	angular.module('myApp').controller('HomeController', Controller);

	Controller.$inject=['$scope','LaudoFactory', '$routeParams', '$filter'];

	function Controller($scope, LaudoFactory, $routeParams, $filter){

        var self = this;
				var laudoAprovado = 0;
				var laudoEmElaboracao = 0;
				var laudoEmAprovacao = 0;
				self.laudos = [];
				self.filtro = '';

				self.init = function(){
					buscaLaudos();
				};

				function buscaLaudos(){
					LaudoFactory.get().then(function(resp){
						if (resp.data){
							self.laudos = resp.data;
							console.log("LAUDOS", self.laudos);
												prepararObjeto();
						}
					}).then(function (){
						contLaudos();
					});

				}
				function contLaudos(){
					for(var x = 0; x < self.laudos.length; x++){
						console.log("STATUS", self.laudos[x].status);
						if(self.laudos[x].status == "Aprovado"){
							laudoAprovado += 1;
						}
						if(self.laudos[x].status == "Em Elaboração"){
							laudoEmElaboracao += 1;
						}
						if(self.laudos[x].status == "Em Aprovação"){
							laudoEmAprovacao += 1;
						}
					}
					centralNotificacao();

				}

				function prepararObjeto(){
						var nome, cidade, id, ano;
						self.laudos.forEach(function(laudo){
								//ajustando exibição de datas
								//laudo.data_inicial = $filter('date')(laudo.data_inicial, 'dd/MM/yyyy', 'UTC');
								//laudo.data_final = $filter('date')(laudo.data_final, 'dd/MM/yyyy', 'UTC');
						});
				};

			function centralNotificacao(){
				self.mensagem = {texto: ''};
				self.informativos = [
					{"texto":"Laudos em Aprovação: "+laudoEmAprovacao+""},
					{"texto":"Laudos em Elaboração: "+laudoEmElaboracao+""},
					{"texto":"Laudos Aprovados: "+laudoAprovado+""}
				];

			}

		self.init();
	}
})();

(function (){
  'use strict';

  angular.module('myApp').directive('back', Directive);

  Directive.$inject = ['$window'];

  function Directive($window){
    return {
      restrict : 'A', 
      link: function(scope, element, attrs){
        element.bind('click', function(){
          $window.history.back();
          scope.$apply();
        });
      }
    };
  }

})();

(function (){
  'use strict';

  angular.module('myApp').directive('validateInput', Directive);

  Directive.$inject = [];

  function Directive(){
    return {
      //restrict : 'A',
      require: 'ngModel',
      link: function(scope, element, attrs, controller){
        function validate(value){
          if(value.length > 0 && value.length < 4){
            controller.$setValidity("SizeInput", false);
          }else if (value.length > 4 &&  value.length < 15){
             controller.$setValidity("SizeInput", true);
          }else{
            controller.$setValidity("SizeInput", false);
          }
          return value;
        }
        controller.$parsers.push(validate);
      }
    };
  }

})();

(function (){
  'use strict';

  angular.module('myApp').directive('radioboolean', Directive);

  Directive.$inject = [];

  function Directive(){
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, ngModelController){
        ngModelController.$formatters.push(function (modelValue) {
                if (modelValue === true)
                {
                    console.log("true 1");
                    return "true";
                }
                else if (modelValue === false)
                {
                    return "false";
                }
                else
                {
                    return undefined;
                }
            });

        ngModelController.$parsers.push(function (viewValue) {
                if (viewValue === "true")
                {
                    console.log("true novo");
                    return true;
                }
                else if (viewValue === "false")
                {
                    return false;
                }
                else
                {
                    return undefined;
                }
            });
      }
    };
  }

})();

(function() {
	'use strict';

	angular.module('myApp').directive('fileInput', ['$parse', function($parse){
		return {
			restrict: 'A',
			link: function(scope,elm,attrs){

				elm.bind('change',function(){
					//debugger;
					$parse(attrs.fileInput).assign(scope,elm[0].files);

					if (elm[0].id === "fotofront"){
						if (elm[0].files.length > 0){
							scope.btnFotoFront = false;
							scope.selFotoLe    = true;
							scope.selFotoLd    = true;
							scope.selFotoPost  = true;
						}else{
							scope.btnFotoFront = true;
							scope.selFotoLe    = false;
							scope.selFotoLd    = false;
							scope.selFotoPost  = false;
						}

					}
					if (elm[0].id === "fotole"){
						if (elm[0].files.length > 0){
							scope.btnFotoLe    = false;
							scope.selFotoFront = true;
							scope.selFotoLd    = true;
							scope.selFotoPost  = true;
						}else{
							scope.btnFotoLe    = true;
							scope.selFotoFront = false;
							scope.selFotoLd    = false;
							scope.selFotoPost  = false;
						}

					}
					if (elm[0].id === "fotold"){
						if (elm[0].files.length > 0){
							scope.btnFotoLd    = false;
							scope.selFotoFront = true;
							scope.selFotoLe    = true;
							scope.selFotoPost  = true;
						}else{
							scope.btnFotoLd    = true;
							scope.selFotoFront = false;
							scope.selFotoLe    = false;
							scope.selFotoPost  = false;
						}
					}
					if (elm[0].id === "fotopost"){
						if (elm[0].files.length > 0){
							scope.btnFotoPost  = false;
							scope.selFotoFront = true;
							scope.selFotoLe    = true;
							scope.selFotoLd    = true;
						}else{
							scope.btnFotoPost  = true;
							scope.selFotoFront = false;
							scope.selFotoLe    = false;
							scope.selFotoLd    = false;
						}

					}

					/**********Upload Ponto Perigo********************/

					if (elm[0].id === "fotopp01"){
						if (elm[0].files.length > 0){
							scope.btnFotoPP01 = false;
							scope.selFotoPP02 = true;
							scope.selFotoPP03 = true;
							}else{
							scope.btnFotoPP01 = true;
							scope.selFotoPP02 = false;
							scope.selFotoPP03 = false;
						}
					}

					if (elm[0].id === "fotopp02"){
						if (elm[0].files.length > 0){
							scope.btnFotoPP02 = false;
							scope.selFotoPP01 = true;
							scope.selFotoPP03 = true;
							}else{
							scope.btnFotoPP02 = true;
							scope.selFotoPP01 = false;
							scope.selFotoPP03 = false;
						}
					}

					if (elm[0].id === "fotopp03"){
						if (elm[0].files.length > 0){
							scope.btnFotoPP03 = false;
							scope.selFotoPP01 = true;
							scope.selFotoPP02 = true;
							}else{
							scope.btnFotoPP03 = true;
							scope.selFotoPP01 = false;
							scope.selFotoPP02 = false;
						}
					}


					if (elm[0].id === "imagem"){
						if (elm[0].files.length > 0){
							scope.btnImagem  = false;
						}else{
							scope.btnImagem  = true;
						}
					}
					scope.$apply()
				})
			}
		}
	}]);

})();

(function() {
	'use strict';

	angular.module('myApp').directive('validate', Validate);

  	Validate.$inject = ['$compile'];

	function Validate($compile){
		return {
			restrict: "A",
			require: "ngModel",
			priority: 5000,
			link: function(scope, element, attr, mCtrl){

				var novaLabel;
				var label = element.closest(".form-group").find("label[for='"+attr.id+"']").text();
				var html = "<div ng-messages='" + element[0].form.name + "." + mCtrl.$name + ".$error' ng-if='!" + element[0].form.name + "."
						+ mCtrl.$name + ".$pristine'>";

				if (label.indexOf("*") != -1){
					novaLabel = label.substring(0,label.indexOf("*"));
				}else{
					novaLabel = label;
				}
				novaLabel = novaLabel.toLowerCase();


				for(var x in element[0].attributes){

					if(element[0].attributes[x].name == "ng-minlength"){
						html += "<p class='help-block' ng-message='minlength'>O campo "+ novaLabel +" deve ter no mínimo "+ element[0].attributes[x].value +" caracteres.</p>";
					}
					if(element[0].attributes[x].name == "ng-maxlength"){
						html += "<p class='help-block' ng-message='maxlength'>O campo "+ novaLabel +" deve ter no máximo "+ element[0].attributes[x].value +" caracteres.</p>";
					}
					if(element[0].attributes[x].name == "ng-max"){
						html += "<p class='help-block' ng-message='max'>O campo "+ novaLabel +" deve ser menor ou igual a "+ element[0].attributes[x].value +" .</p>";
					}
					if(element[0].attributes[x].name == "ng-min"){
						html += "<p class='help-block' ng-message='min'>O campo "+ novaLabel +" deve ser maior ou igual a "+ element[0].attributes[x].value +" .</p>";
					}
					if(element[0].attributes[x].name == "ng-pattern"){
						html += "<p class='help-block' ng-message='pattern'>Caracteres especiais não são permitidos</p>";
					}
					if(element[0].localName == "select" && element[0].attributes[x].name == "required"){
						html += "<p class='help-block' ng-message='required'>O campo "+ novaLabel +" deve ser selecionado.</p>";
					}
					if(element[0].localName == "select" && element[0].attributes[x].name == "ng-required"){
						html += "<p class='help-block' ng-message='required'>O campo "+ novaLabel +" deve ser selecionado.</p>";
					}
					if(element[0].attributes[x].name == "required"){

						html += "<p class='help-block' ng-message='required'>O campo "+ novaLabel +" deve ser preenchido.</p>";
					}
					if(element[0].attributes[x].value == "email"){
						html += "<p class='help-block' ng-message='email'>Informe um e-mail válido.</p>";
					}
				}

				html += "</div>";

				var template = angular.element(html);
				var linkFn = $compile(template);
				var content = linkFn(scope);
				element.after(content);

			}

		};
	}

})();

(function() {
	'use strict';

	angular.module('myApp').factory('CapacitacaoFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/capacitacao/:id', null, {
		//return $resource('/capacitacao/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('ClienteFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/cliente/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('DisposicoesFinaisFactory',
		function($resource){
			var factory = {
				get : fnGet,
				search : fnSearch,
				update : fnUpdate
			};

			var resource = $resource('/disposicoesFinais', null,{
				'update':{
					method: 'PUT'
				},
				'search':{
					method : 'GET',
					params : {
						query : '@query'
					}
				}
			});

			function fnGet(){
				return resource.get().$promise;
			}
			function fnUpdate(data){
				return resource.update(data).$promise;
			}
			function fnSearch(param){
				return resource.search({search:param}).$promise;
			}
			return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('DispositivoFactory',
		function($resource){
				var factory = {
				get: fnGet,
				search : fnSearch,
				update : fnUpdate
			};

			var resource = $resource('/dispositivo', null,{
				'update':{
					method: 'PUT'
				},
				'search':{
					method : 'GET',
					params : {
						query : '@query'
					}
				}
			});

			function fnGet(){
				return resource.get().$promise;
			}
			function fnUpdate(data){
				return resource.update(data).$promise;
			}
			function fnSearch(param){
				return resource.search({search:param}).$promise;
			}
			return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('LaudoFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove,
            confirma : fnConfirma,
            imprime : fnImprime,
            aprova : fnAprova
		};

		var resource = $resource('/laudo/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

        var resourceConfirma = $resource('/confirma/:id', null, {
			'update':{
				method:'PUT'
			}
		});

        var resourceImprime = $resource('/relatorio/:id', null, {
			'update':{
				method:'GET'
			}
		});

         var resourceAprova = $resource('/aprova/:id', null, {
			'update':{
				method:'PUT'
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

        function fnConfirma(id){
			return resourceConfirma.update({id:id}).$promise;
		}

        function fnImprime(id){
			if(id){
				return resourceImprime.get({id:id}).$promise;
			}else{
				return resourceImprime.get().$promise;
			}
		}

         function fnAprova(id){
			return resourceAprova.update({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('MaquinaFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/maquina/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('NormaRegFactory',
		function($resource){
			var factory ={
				get : fnGet,
				save : fnSave,
				update : fnUpdate,
				search : fnSearch,
				remove : fnRemove
			};

      var resource = $resource('/normaRegulamentadora/:id', null, {

				'update':{
					method: 'PUT'
				},

				'search':{
					method: 'GET',
					params : {
						query : '@query'
					}
				}
			});
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}
		function fnSave(data){
			return resource.save(data).$promise;
		}
		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('NormaTecnicaFactory', function($resource){

	var factory = {
		get : fnGet,
		save : fnSave,
		update : fnUpdate,
		search : fnSearch,
		remove : fnRemove
	};

	var resource = $resource('/normaTecnica/:id', null, {
		'update':{
			method: 'PUT'
		},
		'search' : {
			method : 'GET',
			params : {
				query :'@query'
			}
		}
	});

	function fnGet(id){	
		if(id){
			return resource.get({id:id}).$promise;
		}else{
			return resource.get().$promise;
		}
	}
	function fnSave(data){
		return resource.save(data).$promise;
	}
	function fnUpdate(id, data){
		return resource.update({id:id}, data).$promise;
	}
	function fnSearch(param){
		return resource.search({search:param}).$promise;
	}

	function fnRemove(id){
		return resource.delete({id:id}).$promise;
	}
	return factory;
 });
})();

(function() {
	'use strict';

	angular.module('myApp').factory('PerguntaFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/pergunta/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('PerigoFactory', function($resource){
		
		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};
		
		var resource = $resource('/perigo/:id', null,{
			'update':{
				method:'PUT'
			},
			'search':{
				method:'GET',
				paramns : {
					query : '@query'
				}
			}
		});
		
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}
		
		function fnSave(data){
			return resource.save(data).$promise;
		}
		
		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}
		
		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}
		
		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}
		
		return factory;
	});
})();
(function() {
	'use strict';

	angular.module('myApp').factory('PortariaFactory',
		function($resource){
			var factory = {
				get : fnGet,
				search : fnSearch,
				update : fnUpdate
			};

			var resource = $resource('/portaria', null,{
				'update':{
					method: 'PUT'
				},
				'search':{
					method : 'GET',
					params : {
						query : '@query'
					}
				}
			});

			function fnGet(){
				return resource.get().$promise;
			}
			function fnUpdate(data){
				return resource.update(data).$promise;
			}
			function fnSearch(param){
				return resource.search({search:param}).$promise;
			}
			return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('RespostaFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/resposta/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('RespTecnicaFactory',
		function($resource){
			//return $resource('/respTecnicas/:id');

			var factory = {
				get : fnGet,
				search : fnSearch,
				update : fnUpdate
			};

			var resource = $resource('/respTecnica', null,{
				'update': {
					method: 'PUT'
				},
				'search': {
					method : 'GET',
					params : {
						query : '@query'
					}
				}
			});
			function fnGet(){
				return resource.get().$promise;
			}
			function fnUpdate(data){
				return resource.update(data).$promise;
			}
			function fnSearch(param){
				return resource.search({search:param}).$promise;
			}
			return factory;
	});
})();

(function() {
	'use strict';
	
	angular.module('myApp').factory('RiscoFactory', function($resource){
		
		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};
		
		var resource = $resource('/risco/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});
		
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}
		
		function fnSave(data){
			return resource.save(data).$promise;
		}
		
		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}
		
		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}
		
		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}
		
		return factory;
	});
})();
(function() {
	'use strict';
	
	angular.module('myApp').factory('SistemaSegurancaFactory', function($resource){
		
		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};
		
		var resource = $resource('/sistemaSeguranca/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});
		
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}
		
		function fnSave(data){
			return resource.save(data).$promise;
		}
		
		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}
		
		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}
		
		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}
		
		return factory;
	});
})();
(function() {
	'use strict';

	angular.module('myApp').factory('TipoDispositivoFactory', function($resource){

		var factory = {
			get : fnGet,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/tipoDispositivo/:id', null, {
		//return $resource('/capacitacao/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

	(function() {
	'use strict';

	angular.module('myApp').factory('TipoMaquinaFactory',	function($resource){
			var factory = {
				get : fnGet,
				save : fnSave,
				update : fnUpdate,
				search : fnSearch,
				remove : fnRemove
			};
		//	return $resource('/tiposMaquinas/:id');

		var resource = $resource('/tipoMaquina/:id', null, {

			'update':{
				method: 'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}
		function fnUpdate(id, data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('LimiteMaquinaFactory',	function($resource){
			var factory = {
				get : fnGet,
				save : fnSave,
				update : fnUpdate,
				search : fnSearch,
				remove : fnRemove
			};
		//	return $resource('/limitesMaquinas/:id');

		var resource = $resource('/limiteMaquina/:id', null, {

			'update':{
				method: 'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});
		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			}else{
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}
		function fnUpdate(id, data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('UsuarioFactory', function($resource){

		var factory = {
			get : fnGet,
			getByUsername : fnGetByUsername,
			save : fnSave,
			update : fnUpdate,
			search : fnSearch,
			remove : fnRemove
		};

		var resource = $resource('/usuario/:id', null, {
		//return $resource('/usuario/:id', null, {
			'update':{
				method:'PUT'
			},
			'search':{
				method : 'GET',
				params : {
					query : '@query'
				}
			}
		});

		function fnGet(id){
			if(id){
				return resource.get({id:id}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnGetByUsername(username){
			if(username){
				return $resource('/usuario/:username').get({username: username}).$promise;
			} else {
				return resource.get().$promise;
			}
		}

		function fnSave(data){
			return resource.save(data).$promise;
		}

		function fnUpdate(id,data){
			return resource.update({id:id},data).$promise;
		}

		function fnSearch(param){
			return resource.search({search:param}).$promise;
		}

		function fnRemove(id){
			return resource.delete({id:id}).$promise;
		}

		return factory;
	});
})();

(function(){
  'use strict';

  angular.module('myApp').filter('cep', function(){
    return function(input){
      var str = input + '';
      str = str.replace(/\D/g, '');
      str = str.replace(/^(\d{2})(\d{3})(\d)/, '$1.$2-$3');
      return str;
    };
  });
})();

(function() {
	'use strict';
	
	angular.module('myApp').filter('cnpj', function(){
		return function(input){
			var str = input + '';
			str = str.replace(/\D/g, '');
			str = str.replace(/^(\d{2})(\d)/, '$1.$2');
			str = str.replace(/^(\d{2})\.(\d{3})(\d)/, '$1.$2.$3');
			str = str.replace(/\.(\d{3})(\d)/, '.$1/$2');
			str = str.replace(/(\d{4})(\d)/, '$1-$2');
			return str;
		};
	});
})();
(function(){
  'use strict';

  angular.module('myApp').filter('phone', function(){
    return function(input){
      var str = input + '';
      str = str.replace(/\D/g, '');
      if(str.length ===11){
      str = str.replace(/^(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
    }else{
      str = str.replace(/^(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
    }
    return str;
  };
});
})();

(function(){
    'use strict';
    angular.module('myApp').filter('rowLength', function(){
      return function (value, wordwise, max, tail) {
            if (!value) return '';
            max = parseInt("100");
            if (!max) return value;
            if (value.length <= max) return value;

            value = value.substr(0, max);
            if (wordwise) {
                var lastspace = value.lastIndexOf(' ');
                if (lastspace != -1) {
                  //Also remove . and , so its gives a cleaner result.
                  if (value.charAt(lastspace-1) == '.' || value.charAt(lastspace-1) == ',') {
                    lastspace = lastspace - 1;
                  }
                  value = value.substr(0, lastspace);
                }
            }

            return value + (tail || ' …');
        };
    });
})();

(function() {
	'use strict';

	angular.module('myApp').filter('upperCase', function(){
		return function(input){
			var str = input + '';
			str = str.replace(/[A-Z]/g, '');

			return str;
		};
	});
})();

(function() {
	'use strict';

	angular.module('myApp').factory('AuthService', AuthService);

    AuthService.$inject = ['$http', '$localStorage', '$q'];

	function AuthService($http, $localStorage, $q){
        return {
            getToken: function() {
                return $localStorage.token;
            },
            setToken: function(token){
                $localStorage.token = token;
            },
            login: function(data, success, error){
                $http.post('/authenticate', data).then(success, error);
            },
            password: function(data, success, error){
                $http.post('/password', data).then(success, error);
            },
            logout: function(){
                $("#userName").html("");
                delete $localStorage.token;
                delete $localStorage.usuario;
            }
        };
	}
})();

(function() {
	'use strict';

	angular.module('myApp').factory('Interceptor', Factory);

  Factory.$inject = ['$q', 'toaster', '$localStorage', '$location'];

	function Factory($q, toaster, $localStorage, $location){

		var httpInterceptor = {
			request: function(config){
				config.headers = config.headers || {};
                //debugger;
				if($localStorage.token){
					config.headers['Authorization'] = 'Bearer ' + $localStorage.token;
				}else if (config.url === 'partials/usuario/formPassword.html') {
                    $location.path('/login');
                    toaster.pop('error', "Info", "Para alterar sua senha, faça o login!");
                }

				return config;
			},
            response: function(response){
                //debugger;
                if(response.data.status && response.data.message){
                    toaster.pop(response.data.status, "Info", response.data.message);
                }
                return response;
            },
            responseError: function(resp){
                if(resp.data.status && resp.data.message){
                    if(resp.data.error){
                        if(resp.data.error.name === "SequelizeValidationError"){
                            var msg = "";
                            for(var x in resp.data.error.errors){
                                msg += "Campo " + resp.data.error.errors[x].path + " : " + resp.data.error.errors[x].message + "<br />";
                            }
                            toaster.pop(resp.data.status, "Erro na validação", msg, 5000,'trustedHtml');
                        }else{
                            toaster.pop(resp.data.status, "Info", resp.data.message);
                        }
                    }else{
                        toaster.pop(resp.data.status, "Info", resp.data.message);
                    }
                }
                if(resp.status === 401){
                    $location.path('/login');
                }
                return $q.reject(resp);
            }
		}
		return httpInterceptor;
	}

	angular.module('myApp').config(['$httpProvider', Interceptor]);

	function Interceptor($httpProvider){
		$httpProvider.interceptors.push('Interceptor');
	}
})();

(function() {
	'use strict';

	angular.module('myApp').factory('Tools', Factory);

	Factory.$inject = [];

	function Factory(){
		return {
			formataRetorno : function(erro){
				var msg = "Favor verificar as inconsistências: <br/>";
				for (var i = 0; i < erro.data.length; i++){
					msg += "Campo: " + erro.data[i].path + ". Inconsitência: " + erro.data[i].message + " <br/>";
				};
				return msg;
			}
		};
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formCapacitacaoController', Controller);

	Controller.$inject=['$routeParams', '$location', 'CapacitacaoFactory'];

	function Controller($routeParams, $location, CapacitacaoFactory){

		var self = this;

		self.init = function(){
			// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da capacitacao
			if($routeParams.capacitacaoId){
				CapacitacaoFactory.get($routeParams.capacitacaoId)
					.then(function(resp){
						if(resp.data){
							self.capacitacao = resp.data;
						}
					}); 
			}else{ 
				self.capacitacao = {};
			}
		};

		self.salva = function(){
			if(!self.capacitacao.id){
				save();
			}else{ 
				update();
			}
		};

		function save(){
			CapacitacaoFactory.save(self.capacitacao)
				.then(function(resp){
					if(resp.data){
						//limpa o formulario
						self.capacitacao = {};
						$location.path('/capacitacoes');
					}
				});
		}

		function update(){
			CapacitacaoFactory.update(self.capacitacao.id, self.capacitacao)
				.then(function(){
					//limpa o formulario
					self.capacitacao = {};
					$location.path('/capacitacoes');
				});
		}

		self.remove = function(capacitacao){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Capacitação ?",
				callback: function(confirma){
					if (confirma) {
						CapacitacaoFactory.remove(capacitacao.id)
							.then(function(data){
								$location.path('/capacitacoes');
				 		});
				  }
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaCapacitacaoController', Controller);

	Controller.$inject=['CapacitacaoFactory'];

	function Controller(CapacitacaoFactory){

		var self = this;

		self.capacitacoes = [];

		self.filtro = '';

		self.init = function(){
			buscaCapacitacoes();
		};

		function buscaCapacitacoes(){
			CapacitacaoFactory.get().then(function(resp){
				if(resp.data){
					self.capacitacoes = resp.data;
				}
			});
		}
		self.remove = function(capacitacao){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Capacitação?",
				callback: function(confirma){
					if(confirma){
						CapacitacaoFactory.remove(capacitacao.id)
							.then(function(data){
								buscaCapacitacoes();
							});
					}
				}
			});
		};
		self.init();
	}
})();

 (function() {
	'use strict';

	angular.module('myApp').controller('formClienteController', Controller);

	Controller.$inject=['$http','$scope','$routeParams', '$location', 'ClienteFactory', 'uppercaseFilter'];

	function Controller($http, $scope, $routeParams, $location, ClienteFactory, uppercaseFilter){
    
    	//Inicia os botões de upload
    	$scope.btnImagem = true;
    	$scope.selImagem = false;

		var self = this;

		self.init = function(){

			if($routeParams.clienteId){
				ClienteFactory.get($routeParams.clienteId)
					.then(function(resp){
						if(resp.data){
							self.cliente = resp.data;
              if(self.cliente.imagem !== undefined){
                self.cliente.imagem = {
                  show:"./cliente/"+self.cliente.id+"/imagem/"+self.cliente.imagem
                }
              }
						}
					});
			}else{
				self.cliente = {};
			}
		};

    self.upload = function(nomeFoto){
// debugger

      var fd = new FormData();


      if($scope.imagem !== undefined){
         angular.forEach($scope.imagem, function(file){

           fd.append('file', file);
         })

        $scope.imagem = undefined;
        self.postUpload(fd, nomeFoto);
        $scope.btnImagem = true;
      }
    };

    self.postUpload = function(fd, nomeFoto){
    //  debugger
      console.log(fd);
      $http.post('/upload', fd,{
        transformRequest: angular.identity,
        headers: {'Content-type': undefined}
      })
      .success(function(data){

        self.cliente.imagem = {
          'path':data.path,
          'nome':data.nome,
          'show':data.path.substring(7,data.path.length)
        };
        console.log(self.cliente.imagem);
      })
      .error(function(error){
        bootbox.alert('Erro ao fazer upload!')
      })
    };

		self.salva = function(){
      self.cliente.estado = uppercaseFilter(self.cliente.estado);

			if(!self.cliente.id){
				save();
			}
      if(self.cliente.id){
        update();
      }
    };

		function save(){
			ClienteFactory.save(self.cliente)
				.then(function(resp){
					if(resp.data){
						//limpa o formulario
						self.cliente = {};
						$location.path('/clientes');
					}
				});
		}

		function update(){


    	ClienteFactory.update(self.cliente.id, self.cliente)
				.then(function(){
					//limpa o formulario
					self.cliente = {};
					$location.path('/clientes');
				});
		}

		self.remove = function(cliente){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Cliente?",
				callback: function(confirma){
					if (confirma) {
						ClienteFactory.remove(cliente.id)
							.then(function(data){
								$location.path('/clientes');
							});
					}
				}
			});
		};
		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaClienteController', Controller);

	Controller.$inject=['ClienteFactory', '$localStorage'];

	function Controller(ClienteFactory, $localStorage){

		var self = this;

		self.clientes = [];

		self.filtro = '';

		self.init = function(){
			buscaClientes();
            console.log($localStorage);
		};

		function buscaClientes(){
			ClienteFactory.get().then(function(resp){
				if(resp.data){
					self.clientes = resp.data;
				}
			});
		}

		self.remove = function(cliente){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Cliente?",
				callback: function(confirma){
					if (confirma) {
						ClienteFactory.remove(cliente.id)
							.then(function(data){
								buscaClientes();
							});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formDisposicoesFinaisController', Controller);

	Controller.$inject=['$routeParams', '$location', 'DisposicoesFinaisFactory'];

	function Controller($routeParams, $location, DisposicoesFinaisFactory){

		var self = this;

		self.init = function(){
			buscaDisposicaoFinal();
		};

		self.altera = function(){
			update();
		};

		function buscaDisposicaoFinal(){
			DisposicoesFinaisFactory.get().then(function(resp){
				if(resp.data){
					self.disposicaofinal = resp.data;
				}
			});
		}

		function update(){
	 		DisposicoesFinaisFactory.update(self.disposicaofinal).then(function(){
				$location.path('/disposicoesFinais');
			});
	 	}
		
		self.init();
	}

})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaDisposicoesFinaisController', Controller);

	Controller.$inject=['DisposicoesFinaisFactory'];

	function Controller(DisposicoesFinaisFactory){

		var self = this;

		//self.portarias = [];

		//self.filtro = '';

		self.init = function(){
			buscaDisposicaoFinal();
		};

		function buscaDisposicaoFinal(){
			DisposicoesFinaisFactory.get().then(function(resp){
				console.l
				if(resp.data){
					self.disposicaofinal = resp.data;
				}
			});
		};

		self.init();
	}

})();

(function() {
	'use strict';

	angular.module('myApp').controller('formDispositivoController', Controller);

	Controller.$inject=['$routeParams', '$location', 'DispositivoFactory'];

	function Controller($routeParams, $location, DispositivoFactory){

		var self = this;

		self.init = function(){
			DispositivoFactory.get()
			.then(function(resp){
				if(resp.data){
					self.dispositivo = resp.data;
				}
			});

		};
		self.altera = function(){
			update();
		};

		function update(){
			DispositivoFactory.update(self.dispositivo)
			.then(function(){
				$location.path('/dispositivos');
			});
		};
			self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaDispositivoController', Controller);

	Controller.$inject=['DispositivoFactory'];

	function Controller(DispositivoFactory){
		var self = this;

		self.dispositivo = [];

		self.filtro = '';

		self.mensagem = {texto: ''};

		self.init = function(){
			buscaDispositivos();
		};
		//self.filtro = '';
		function buscaDispositivos(){
			DispositivoFactory.get().then( function(resp){
				if(resp.data){
					console.log(resp.data);
					self.dispositivo = resp.data;
				}
			});
		};
		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formLaudoController', Controller);

	Controller.$inject=['$http','$scope', '$routeParams', '$location', 'LaudoFactory', 'TipoDispositivoFactory', 'PerguntaFactory', 'ClienteFactory', 'MaquinaFactory', 'LimiteMaquinaFactory', 'NormaTecnicaFactory', 'NormaRegFactory', 'PerigoFactory', 'RiscoFactory', '$uibModal', '$document',
    '$filter'];

	function Controller ($http, $scope, $routeParams, $location, LaudoFactory, TipoDispositivoFactory, PerguntaFactory, ClienteFactory, MaquinaFactory, LimiteMaquinaFactory, NormaTecnicaFactory, NormaRegFactory, PerigoFactory, RiscoFactory, $uibModal, $document, $filter){

		$scope.btnImagem = true;
		$scope.selImagem = false;


		var self = this;


		self.init = function(){
			iniciaLaudo();
			buscaCliente();
			//buscaNormaTecnica();
			//buscaItemNorma();
			//			buscaPerigos();
		};

		function iniciaLaudo(){

			if($routeParams.laudoId){
				LaudoFactory.get($routeParams.laudoId)
				.then(function(resp){
					if(resp.data){
						self.laudo = resp.data;
						self.clienteSelecionado = self.laudo.maquina.clienteId;
						atribuiImagem();
						atribuiImagemLimite();
						atribuiImagemPontoPerigo();
						self.buscaMaquina();
						buscaNormaTecnica();
						buscaLimiteMaquina();
					}
				});
			}else{
				self.laudo = {
					usuarioId: "",
					dispositivos: [],
					normasTecnicas : [],
					limitesMaquinas : [],
					pontoPerigos : []
				};
				buscaNormaTecnica();
				buscaLimiteMaquina();
				//self.laudo.data_inicial = new Date();

			}
		};

		function atribuiImagem(){
			self.laudo.dispositivos.forEach(function(disp){
				disp.imagem = {
					"show": "./dispositivos/"+disp.id+"/"+disp.imagem
				}
			});
		}

		function atribuiImagemLimite(){
			if(self.laudo.imagem){
				self.laudo.imagem = {
					"show" : "./laudos/"+self.laudo.id+"/limite/"+self.laudo.imagem
				}
			}
		}

		function atribuiImagemPontoPerigo(){
			self.laudo.pontoPerigos.forEach(function(pontop){
				if(pontop.fotopp01 != undefined){
					pontop.fotopp01 = {
						"show": "./laudos/"+self.laudo.id+"/pontoPerigo/"+pontop.id+"/fotopp01/"+pontop.fotopp01
					}
				}
				if(pontop.fotopp02 != undefined){
					pontop.fotopp02 = {
						"show": "./laudos/"+self.laudo.id+"/pontoPerigo/"+pontop.id+"/fotopp02/"+pontop.fotopp02
					}
				}
				if(pontop.fotopp03 != undefined){
					pontop.fotopp03 = {
						"show": "./laudos/"+self.laudo.id+"/pontoPerigo/"+pontop.id+"/fotopp03/"+pontop.fotopp03
					}
				}
			});
		}

		self.upload = function(nomeFoto){

			var fd = new FormData();
			if($scope.imagem !== undefined){
				angular.forEach($scope.imagem, function(file){
					fd.append('file', file);
				});

				$scope.imagem = undefined;
				self.postUpload(fd, nomeFoto);
				$scope.btnImagem = true;
			}
    	};

	    self.postUpload = function(fd, nomeFoto){
			$http.post('/upload', fd,{
				transformRequest: angular.identity,
				headers: {'Content-type': undefined}
			}).success(function(data){
				self.laudo.imagem = {
				  'path':data.path,
				  'nome':data.nome,
				  'show':data.path.substring(7,data.path.length)
				};
			}).error(function(error){
				bootbox.alert('Erro ao fazer upload!');
			});
	    };

		self.salva = function(){
			if(!self.laudo.id){
				save();
			}else{
				update();
			}
		};

		function save(){
			console.log("Laudo - Save() ");
            self.laudo.status = "Em Elaboração";
			LaudoFactory.save(self.laudo)
			.then(function(resp){
				if(resp.data){
					self.laudo = {};
					$location.path('/laudos');
				}
			});
		}

		function update(){
			//self.laudo.data_final = new Date();
			console.log("Laudo - Update() ");
			LaudoFactory.update(self.laudo.id, self.laudo).then(function(){
				//limpa o formulario
				self.laudo = {};
				$location.path('/laudos');
			});
		}

		/****************Aba Empresa*********************/
		function buscaCliente(){
			ClienteFactory.get().then(function(resp){
				if(resp.data){
					self.clientes = resp.data;
				}
			});
		}

		self.buscaMaquina = function(){
			self.maquinas = [];
			ClienteFactory.get(self.clienteSelecionado).then(function(resp){
				if(resp.data){
					self.maquinas = resp.data.maquinas;
				}
			});
		};


		/************************ Aba Ponto de Perigo **************************/
		self.filtroPontoPerigo = "";

		self.novoPontoPerigo = function(){

			self.pontoPerigo = {
				Perigos:[],
				Riscos:[],
				normas:[]
			};

			var parentElement = angular.element($document[0].querySelector('.modal-demo .modal-parent'));
			var paramPerigo = {
				animation:true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'perigosModal.html',
				controller: 'formModalPontoPerigoController',
				controllerAs: '$ctrl',
				size: 'lg',
				appendTo: parentElement,
				resolve:{
					pontoPerigo: function(){
						return self.pontoPerigo;
					}
				}
			};
			self.index = -1;
			var modalInstance = $uibModal.open(paramPerigo);
			modalInstance.result.then(function(pontoPerigo){
				self.laudo.pontoPerigos.push(pontoPerigo);
			}, function(){
				self.index = -1;
			});
		};

		self.editaPontoPerigo = function(pontoPerigo, x){
			var parentElement = angular.element($document[0].querySelector('.modal-demo .modal-parent'));
			var paramPerigo = {
				animation:true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'perigosModal.html',
				controller: 'formModalPontoPerigoController',
				controllerAs: '$ctrl',
				size: 'lg',
				appendTo: parentElement,
				resolve:{
					pontoPerigo: function(){
						return self.pontoPerigo;
					}
				}
			};
			self.index = x;
			self.pontoPerigo = {};
			self.pontoPerigo = pontoPerigo;
			var modalInstance3 = $uibModal.open(paramPerigo);
			modalInstance3.result.then(function(pontoPerigo){
				self.laudo.pontoPerigos.splice(self.index, 1, pontoPerigo);

			}, function(){
				self.index = -1;
			});
		};

		self.removePontoPerigo = function(pontoPerigo, index){

			//debugger;
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Ponto Perigo?",
				callback: function(confirma){
					//debugger;
					if (confirma) {

						if(self.laudo.destroyPontoPerigo == undefined){
							self.laudo.destroyPontoPerigo = [];
						}
						if(pontoPerigo.id){
							self.laudo.destroyPontoPerigo.push(pontoPerigo);
						}
						$scope.$apply(function(){

						self.laudo.pontoPerigos.splice(index, 1);

						});
					}
				}
			});
		};

		/************************ Aba Dispositivos **************************/
		// Inicia com o Formulário oculto
		self.filtroDispovitivos = "";

		self.novoDispositivo = function(){
			self.dispositivo = {
				normas:[]
			};

			var paramElem = angular.element($document[0].querySelector('.modal-demo .modal-parent'));
			var paramDipositivo = {
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'modalDispositivo.html',
				controller: 'formModalDispositivoController',
				controllerAs: '$ctrl',
				size:'lg',
				appendTo: paramElem,
				resolve: {
					dispositivo: function () {
						return self.dispositivo;
					}
				}
			};

			self.index = -1;
			// Mostra formulario de Dispositivo
			var modalInstance1 = $uibModal.open(paramDipositivo);
			modalInstance1.result.then(function(dispositivo) {
				self.laudo.dispositivos.push(dispositivo);
			}, function(){
				self.index = -1;
			});
		};

		self.editaDispositivo = function(dispositivo, x){
			var paramElem = angular.element($document[0].querySelector('.modal-demo .modal-parent'));
			var paramDipositivo = {
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'modalDispositivo.html',
				controller: 'formModalDispositivoController',
				controllerAs: '$ctrl',
				size:'lg',
				appendTo: paramElem,
				resolve: {
					dispositivo: function () {
						return self.dispositivo;
					}
				}
			};

			self.index = x;
			self.dispositivo = {};
			//self.dispositivo = angular.copy(dispositivo);
			self.dispositivo = dispositivo;
			// Mostra formulario de Dispositivo
			var modalInstance2 = $uibModal.open(paramDipositivo);
			modalInstance2.result.then(function(dispositivo) {
				self.laudo.dispositivos.splice(self.index, 1, dispositivo);
			}, function(){
				self.index = -1;
			});
		};

		self.removeDispositivo = function(dispositivo, index) {
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse dispositivo?",
				callback: function(confirma){
					if(confirma){
						if(self.laudo.destroyDispositivos == undefined){
							self.laudo.destroyDispositivos = [];
						}
						if(dispositivo.id){
							self.laudo.destroyDispositivos.push(dispositivo);
						}
						$scope.$apply(function(){
							self.laudo.dispositivos.splice(index, 1);
						});

					}

				}
			});
		};


		/*****************************Aba Norma Tecnica****************************************/
		self.normaTecnicaSelec ="";

		self.btnIncluirNorma = true;

		self.changeNorma = function(){
			self.btnIncluirNorma = self.normaTecnicaSelec ? false : true;
		}

		function buscaNormaTecnica(){
			NormaTecnicaFactory.get().then(function(resp){
				if(resp.data){
					self.normasTecnicas = resp.data;
					for(var x = 0; x < self.laudo.normasTecnicas.length; x++){
						for(var i = 0; i< self.normasTecnicas.length; i++){
							if(self.laudo.normasTecnicas[x].id == self.normasTecnicas[i].id){
								self.normasTecnicas.splice(i,1);
							}
						}
					}
				}else{
					self.normasTecnicas = [];
				}
			});
		}

		self.adicionaNormaTecnica = function() {
			for(var i = 0; i < self.normasTecnicas.length; i++){
				if(self.normasTecnicas[i].id == self.normaTecnicaSelec.id){
					self.normasTecnicas.splice(i, 1);
				}
			};
			self.laudo.normasTecnicas.push(self.normaTecnicaSelec);
			self.btnIncluirNorma = true;
			self.normasTecnicas.Normas = self.laudo.normasTecnicas;
		};

		self.removeNorma = function(norma){
			for(var i = 0; i < self.laudo.normasTecnicas.length; i++){
				if(self.laudo.normasTecnicas[i].id == norma.id){
					self.laudo.normasTecnicas.splice(i,1);
					self.normasTecnicas.push(norma);
				}
			};
		};

	
		self.limiteMaquinaSelec ="";

		self.btnIncluirLimite = true;

		self.changeLimite = function(){
			self.btnIncluirLimite = self.limiteMaquinaSelec ? false : true;
		}

		function buscaLimiteMaquina(){
			LimiteMaquinaFactory.get().then(function(resp){
				if(resp.data){
					self.limitesMaquinas = resp.data;
					for(var x = 0; x < self.laudo.limitesMaquinas.length; x++){
						for(var i = 0; i< self.limitesMaquinas.length; i++){
							if(self.laudo.limitesMaquinas[x].id == self.limitesMaquinas[i].id){
								self.limitesMaquinas.splice(i,1);
							}
						}
					}
				}else{
					self.limitesMaquinas = [];
				}
			});
		}

		self.adicionaLimiteMaquina = function() {
		
			for(var i = 0; i < self.limitesMaquinas.length; i++){
				if(self.limitesMaquinas[i].id == self.limiteMaquinaSelec.id){
					self.limitesMaquinas.splice(i, 1);
				}
			};
			self.laudo.limitesMaquinas.push(self.limiteMaquinaSelec);
			self.btnIncluirLimite = true;
			self.limitesMaquinas.Limites = self.laudo.limitesMaquinas;
		
		};
			
		self.init();
	}

})();




self.adicionaNormaTecnica = function() {
			for(var i = 0; i < self.normasTecnicas.length; i++){
				if(self.normasTecnicas[i].id == self.normaTecnicaSelec.id){
					self.normasTecnicas.splice(i, 1);
				}
			};
			self.laudo.normasTecnicas.push(self.normaTecnicaSelec);
			self.btnIncluirNorma = true;
			self.normasTecnicas.Normas = self.laudo.normasTecnicas;
		};

		self.removeNorma = function(norma){
			for(var i = 0; i < self.laudo.normasTecnicas.length; i++){
				if(self.laudo.normasTecnicas[i].id == norma.id){
					self.laudo.normasTecnicas.splice(i,1);
					self.normasTecnicas.push(norma);
				}
			};
		};



//////





(function() {
	'use strict';

	angular.module('myApp').controller('formModalDispositivoController', Controller);

	Controller.$inject=['$http', '$scope', 'TipoDispositivoFactory', 'PerguntaFactory', 'NormaRegFactory', '$uibModalInstance', 'dispositivo'];

	function Controller ($http, $scope, TipoDispositivoFactory, PerguntaFactory, NormaRegFactory, $uibModalInstance, dispositivo){

		//Inicia os botões de upload
		$scope.btnImagem = true;
		$scope.selImagem = false;

		var $ctrl = this;
		$ctrl.dispositivo = null;

		$ctrl.salvarDispositivo = function () {
			$uibModalInstance.close($ctrl.dispositivo);
		};

		$ctrl.cancelarDispositivo = function () {
			$uibModalInstance.dismiss('cancel');
		};

		$ctrl.init = function() {
			$ctrl.dispositivo = dispositivo;
			buscaTiposDispositivos();
			buscaNormaReg();
			$ctrl.normaSelecionada = "";
		};

		function buscaTiposDispositivos(){
			TipoDispositivoFactory.get().then(function(resp){
				if(resp.data){
					$ctrl.tiposDispositivos = resp.data;
				}else{
					$ctrl.tiposDispositivos = [];
				}
			});
		}

		$ctrl.buscaPerguntas = function (){
			TipoDispositivoFactory.get($ctrl.dispositivo.tipoDispositivoId).then(function(resp){
				if(resp.data){
					$ctrl.dispositivo.perguntas = resp.data.perguntas;
				}
			});
		};

		function buscaNormaReg() {
			NormaRegFactory.get().then(function(resp){
				if(resp.data){
					$ctrl.normas = resp.data;
					for(var x = 0; x < $ctrl.dispositivo.normas.length; x++){
						for(var i = 0; i< $ctrl.normas.length; i++){
							if($ctrl.dispositivo.normas[x].id == $ctrl.normas[i].id){
								$ctrl.normas.splice(i,1);
							}
						}
					}
				}else{
					$ctrl.normas = [];
				}
			});
		}

		$ctrl.adicionaNormaReg = function(){
			if($ctrl.dispositivo.normas == undefined){
				$ctrl.dispositivo.normas = [];
			}
			for (var i = 0; i < $ctrl.normas.length; i++){
				if ($ctrl.normas[i].id == $ctrl.normaSelecionada.id) {
					$ctrl.normas.splice(i,1);
				}
			}
			$ctrl.dispositivo.normas.push($ctrl.normaSelecionada);

			$ctrl.normaSelecionada = "";
		};

		$ctrl.removeNormaReg = function(norma){
			for (var i = 0; i < $ctrl.dispositivo.normas.length; i++) {
				if ($ctrl.dispositivo.normas[i].id == norma.id) {
					$ctrl.dispositivo.normas.splice(i,1);
					$ctrl.normas.push(norma);
				}
			}
		};

		$ctrl.upload = function(nomeFoto){

			var fd = new FormData();

				angular.forEach($scope.imagem, function(file){

					fd.append('file',file);
				})
				$scope.imagem = undefined;
				$ctrl.postUpload(fd, nomeFoto);
				$scope.btnImagem = true;
		}

		$ctrl.postUpload = function(fd, nomeFoto){
						$http.post('/upload', fd,{
				transformRequest:angular.identity,
				headers: {'Content-Type':undefined}
			})
			.success(function(data){
				$ctrl.dispositivo.imagem = {
					'path':data.path,
					'nome':data.nome,
					'show':data.path.substring(7,data.path.length)
				}
				$scope.selImagem = false;
			})
			.error(function(error){
				bootbox.alert('Erro ao fazer upload!!!');
			})
		};

		$ctrl.init();
	}
})();

(function(){
	'use strict';

	angular.module('myApp').controller('formModalPontoPerigoController', Controller);

	Controller.$inject=['$http', '$scope', '$routeParams','PerigoFactory', 'SistemaSegurancaFactory', 'NormaRegFactory', '$uibModalInstance', 'pontoPerigo'];

	function Controller ($http, $scope, $routeParams, PerigoFactory, SistemaSegurancaFactory, NormaRegFactory, $uibModalInstance, pontoPerigo){

		//inicia os botões de upload.
		$scope.btnFotoPP01 = true;
		$scope.btnFotoPP02 = true;
		$scope.btnFotoPP03 = true;
		$scope.selFotoPP01 = false;
		$scope.selFotoPP02 = false;
		$scope.selFotoPP03 = false;

		var $ctrl = this;
		$ctrl.pontoPerigo = null;
		$ctrl.sistemasSeguranca = null;

		$ctrl.salvarPontoPerigo = function(){
			$uibModalInstance.close($ctrl.pontoPerigo);
		};

		$ctrl.cancelarPontoPerigo = function(){
			$uibModalInstance.dismiss('cancel');
		};

		$ctrl.init = function(){
			$ctrl.pontoPerigo = pontoPerigo;
			buscaPerigos();
			listaRiscos();
			buscaNormaReg();
			buscaSistemasSeguranca();
		};

		function buscaSistemasSeguranca(){
			SistemaSegurancaFactory.get().then(function(resp){
				if(resp.data){
					$ctrl.sistemasSeguranca = resp.data;
				}else{
					$ctrl.sistemasSeguranca = [];
				}
			});
		}

		/******************BUSCA PERIGOS*************************/
		function buscaPerigos(){
			PerigoFactory.get().then(function(resp){
				if(resp.data){
					$ctrl.perigos = resp.data;
					for(var x = 0; x < $ctrl.pontoPerigo.Perigos.length; x++){
						for(var i = 0; i< $ctrl.perigos.length; i++){
							if($ctrl.pontoPerigo.Perigos[x].id == $ctrl.perigos[i].id){
								$ctrl.perigos.splice(i,1);
							}
						}
					}
				}else{
					$ctrl.perigos = [];
				}
			});
		}

		/****************************ADICIONA PERIGO***********************************/
		$ctrl.adicionaPerigo = function(){

			for(var i = 0; i < $ctrl.perigos.length; i++){
				if($ctrl.perigos[i].id == $ctrl.perigoSelecionado.id){
					$ctrl.perigos.splice(i, 1);
				}
			}
			$ctrl.pontoPerigo.Perigos.push($ctrl.perigoSelecionado);
			$ctrl.perigoSelecionado = "";

			listaRiscos();
		};

		/****************************ADICIONA Risco***********************************/
		$ctrl.adicionaRisco = function(){

			for(var i = 0; i < $ctrl.riscos.length; i++){
				if($ctrl.riscos[i].id == $ctrl.riscoSelecionado.id){
					$ctrl.riscos.splice(i, 1);
				}
			}
			$ctrl.pontoPerigo.Riscos.push($ctrl.riscoSelecionado);
			$ctrl.riscoSelecionado = "";
		};

		/******************************BUSCA RISCO**************************************/
		function listaRiscos(){
			$ctrl.riscos = [];
			for(var i = 0; i < $ctrl.pontoPerigo.Perigos.length; i++){
				for(var x = 0; x < $ctrl.pontoPerigo.Perigos[i].Riscos.length; x++){
					var contem = false;
				      // verifica sem ja tem o risco na lista de riscos
				      for(var y = 0; y < $ctrl.riscos.length; y++){
				      	if($ctrl.riscos[y] != undefined && $ctrl.riscos[y].id == $ctrl.pontoPerigo.Perigos[i].Riscos[x].id){
				      		contem = true;
				      	}
				      }
				      // verificar se o risco ja esta cadastrado no pontoPerigo
				      for(var z = 0; z < $ctrl.pontoPerigo.Riscos.length; z++){
				      	if($ctrl.pontoPerigo.Riscos[z].id == $ctrl.pontoPerigo.Perigos[i].Riscos[x].id){
				      		contem = true;
				      	}
				      }
				      if(!contem){
				      	console.log("adiciona");
				      	$ctrl.riscos.push($ctrl.pontoPerigo.Perigos[i].Riscos[x]);
				      }
				  }
				}
			}

			/********************* REMOVE PERIGO ***********************************************/
			$ctrl.removePerigo = function(perigo){
				for(var i = 0; i < $ctrl.pontoPerigo.Perigos.length; i++){
					if($ctrl.pontoPerigo.Perigos[i].id == perigo.id){
						$ctrl.pontoPerigo.Perigos.splice(i, 1);
						$ctrl.perigos.push(perigo);
					}
				}
			};

			/********************* REMOVE RISCO ***********************************************/
			$ctrl.removeRisco = function(risco){
				for(var i = 0; i < $ctrl.pontoPerigo.Riscos.length; i++){
					if($ctrl.pontoPerigo.Riscos[i].id == risco.id){
						$ctrl.pontoPerigo.Riscos.splice(i, 1);
						$ctrl.riscos.push(risco);
					}
				}
			};

			/*********************BUSCA ITEM DA NORMA*****************************************/
			function buscaNormaReg(){
				NormaRegFactory.get().then(function(resp){
					if(resp.data){
						$ctrl.normas = resp.data;
						for(var x = 0; x < $ctrl.pontoPerigo.normas.length; x++){
							for(var i = 0; i < $ctrl.normas.length; i++ ){
								if($ctrl.pontoPerigo.normas[x].id == $ctrl.normas[i].id){
									$ctrl.normas.splice(i,1);
								}
							}
						}
					}
				});
			}

			/********************* ADICIONA NORMA REGULAMENTADORA ***************************/
			$ctrl.adicionaNorma = function(){
				console.log("function adicionaNorma");
				if($ctrl.pontoPerigo.normas == undefined){
					$ctrl.pontoPerigo.normas = [];
				}
				for(var i = 0; i < $ctrl.normas.length; i++){
					if($ctrl.normas[i].id == $ctrl.normaSelecionada.id){
						$ctrl.normas.splice(i, 1);
					}
				}
				$ctrl.pontoPerigo.normas.push($ctrl.normaSelecionada);
				$ctrl.normaSelecionada = "";
			};

			/********************* REMOVE ITEM DA NORMA ********************************************************/
			$ctrl.removeItem = function(norma){
				for(var i = 0; i < $ctrl.pontoPerigo.normas.length; i++){
					if($ctrl.pontoPerigo.normas[i].id == norma.id){
						$ctrl.pontoPerigo.normas.splice(i, 1);
						$ctrl.normas.push(norma);
					}
				}
			};

			/*************Upload de Imagens Ponto perigo***********************************/

			$ctrl.upload = function(nomeFoto){

				var fd = new FormData();
				//Fotopp01
				if ($scope.fotopp01 !== undefined){
					angular.forEach($scope.fotopp01, function(file){
						console.log(file);
						fd.append('file',file);
					})
					$scope.fotopp01 = undefined;
					$ctrl.postUpload(fd, nomeFoto);
					$scope.btnFotoPP01 = true;
				}

				if ($scope.fotopp02 !== undefined){
					angular.forEach($scope.fotopp02, function(file){
						console.log(file);
						fd.append('file',file);
					})
					$scope.fotopp02 = undefined;
					$ctrl.postUpload(fd, nomeFoto);
					$scope.btnFotoPP02 = true;
				}

				if ($scope.fotopp03 !== undefined){
					angular.forEach($scope.fotopp03, function(file){
						console.log(file);
						fd.append('file',file);
					})
					$scope.fotopp03 = undefined;
					$ctrl.postUpload(fd, nomeFoto);
					$scope.btnFotoPP03 = true;
				}
			}

			$ctrl.postUpload = function(fd, nomeFoto){

					$http.post('/upload', fd,{
					transformRequest:angular.identity,
					headers: {'Content-Type':undefined}
				})
				.success(function(data){
					switch(nomeFoto){
						case "fotopp01":
							$ctrl.pontoPerigo.fotopp01 = {
								'path':data.path,
								'nome':data.nome,
								'show':data.path.substring(7,data.path.length)
							};
							break;
						case "fotopp02":
							$ctrl.pontoPerigo.fotopp02 = {
								'path':data.path,
								'nome':data.nome,
								'show':data.path.substring(7,data.path.length)
							};
							break;
						case "fotopp03":
							$ctrl.pontoPerigo.fotopp03 = {
								'path':data.path,
								'nome':data.nome,
								'show':data.path.substring(7,data.path.length)
							};
							break;
							default:
							bootbox.alert('Parâmetro errado ao gerar upload. Verifique com o administrador do sistema.');
					}
					$scope.selFotoPP01 = false;
					$scope.selFotoPP02 = false;
					$scope.selFotoPP03 = false;
				})
				.error(function(error){
					bootbox.alert('Erro ao fazer upload!!!');
				})
			};

			/*******************************HRN - Hazard Raiting Number********************/
			$ctrl.calculaHRN = function(){
				if($ctrl.pontoPerigo.pe != "" && $ctrl.pontoPerigo.fe != ""
						&& $ctrl.pontoPerigo.pmp !="" && $ctrl.pontoPerigo.np != ""){
					$ctrl.pontoPerigo.nivelRisco = "";
					$ctrl.pontoPerigo.nivelRisco = $ctrl.pontoPerigo.pe*$ctrl.pontoPerigo.fe*$ctrl.pontoPerigo.pmp*$ctrl.pontoPerigo.np;
				}
			};
			/******************************************************************************/

		$ctrl.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaLaudoController', Controller);

	Controller.$inject=['LaudoFactory', '$filter'];

	function Controller(LaudoFactory, $filter){
		var self = this;
		self.laudos = [];
		self.filtro = '';

		self.init = function(){
			buscaLaudos();
		};

		function buscaLaudos(){
			LaudoFactory.get().then(function(resp){
				if (resp.data){
					self.laudos = resp.data;
                    prepararObjeto();
				}
			});
		}

        function prepararObjeto(){
            var nome, cidade, id, ano;
            self.laudos.forEach(function(laudo){
                //ajustando exibição de datas
                //laudo.data_inicial = $filter('date')(laudo.data_inicial, 'dd/MM/yyyy', 'UTC');
                //laudo.data_final = $filter('date')(laudo.data_final, 'dd/MM/yyyy', 'UTC');
            });
        };

		self.remove = function(laudo){
			if ((laudo.status === "Aprovado")||(laudo.status === "Em Aprovação")){
				bootbox.alert({size:"small", message:"Laudo "+ laudo.status.toLowerCase() + " não pode ser excluído!"});
			}else{
				bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Laudo?",
				callback: function(confirma){
					if (confirma) {
						LaudoFactory.remove(laudo.id)
							.then(function(data){
								buscaLaudos();

							}).catch(function(erro){
								console.log(erro);
							});
						}
					}
				});
			}
		};

        self.confirma = function(id){
            bootbox.confirm({
				size: 'small',
				message: "Deseja enviar esse laudo pra aprovação?",
				callback: function(confirma){
					if (confirma) {
						console.log("*** self.confirma");
				        LaudoFactory.confirma(id).then(function(data){
				            buscaLaudos();
				        }).catch(function(erro){
								console.log(erro);
						});
				    }
				}
            });
        }

        self.imprime = function(id){
            bootbox.confirm({
				size: 'small',
				message: "Deseja realmente imprimir esse laudo?",
				callback: function(confirma){
					if (confirma) {

						console.log("*** self.imprime");
				        LaudoFactory.imprime(id).then(function(data){
				            /*
				            var file = new Blob([data], {type:'application/pdf'});
				            var fileURL = URL.createObjectURL(file);
				            window.open(fileURL);
				            */
				            window.open(data.data);

				        }).catch(function(erro){
								console.log(erro);
						});


						// Funciona
						//window.open("http://localhost:8080/NR12/pdf/laudo1.pdf");
				    }
				}
            });
        }

         self.aprova = function(id){
            bootbox.confirm({
				size: 'small',
				message: "Deseja realmente aprovar esse laudo?",
				callback: function(confirma){
					if (confirma) {
				        LaudoFactory.aprova(id).then(function(data){
				            buscaLaudos();
				        }).catch(function(erro){
								console.log(erro);
						});
				    }
				}
            });
        }

		self.init();
	}
})();

(function() {
	'use strict';
angular.module('myApp').controller('formModalPerigoController', Controller);
Controller.$inject=['$modal', '$routeParams', '$location', 'LaudoFactory'];

function Controller($modal, $routeParams, $location, LaudoFactory){
  var self = this;

  self.perigoModal = {
    fields : {
      nome : "",
      id : ""
    }
  };

  self.perigoOpen = function(){
    self.open({
      templateUrl:'perigoModal.html',
      backdrop: true,
      windowClass: 'modal',
      controller: function(){
        self.submit = function(){}
        self.cancel = function(){};
      }
    });
  }
}
  })();

(function() {
	'use strict';

	angular.module('myApp').controller('loginController', Controller);

	Controller.$inject=['$rootScope', '$location', '$localStorage', 'AuthService', 'toaster', '$base64'];

	function Controller($rootScope, $location, $localStorage, AuthService, toaster, $base64){
		var self = this;

		(function initController(){
			AuthService.logout();
		})();

		self.login = function(){
            //exibe status de "carregando" ao lado do botao login
			self.dataLoading = true;

			var formData = {
				'email': self.email,
				'senha': $base64.encode(self.senha)
			}

			AuthService.login(formData, function(res) {
                var usuario;
                if(res.data.status === 'success' && res.data.token){
                    AuthService.setToken(res.data.token);
                    $localStorage.usuario = res.data.usuario;
                    usuario = res.data.usuario;
                    usuario = usuario.split(' ');
                    usuario = usuario[0];
                    $("#userName").html("Bem Vindo(a) " + usuario);
                    if (res.data.senhaPadrao){
                        $location.path('/usuario/password');
                        res.data.message = 'Redefinir senha padrão';
                    }else{
                        $location.path('/');
                    }
                }
                self.dataLoading = false;
			}, function(){
				alert('ERRO LOGIN');
                self.dataLoading = false;
			});
            
		};

		self.logout = function(){
			AuthService.logout();
		};

	}
})();

 (function() {
	'use strict';

	angular.module('myApp').controller('formMaquinaController', Controller);

	Controller.$inject=['$http','$scope', '$routeParams', '$location', 'MaquinaFactory', 'TipoMaquinaFactory', 'ClienteFactory'];

	function Controller($http, $scope, $routeParams, $location, MaquinaFactory, TipoMaquinaFactory, ClienteFactory){

		$scope.btnFotoFront = true;
		$scope.btnFotoLe= true;
		$scope.btnFotoLd = true;
		$scope.btnFotoPost = true;
		$scope.selFotoFront = false;
		$scope.selFotoLe = false;
		$scope.selFotoLd = false;
		$scope.selFotoPost = false;

		var self = this;

		self.init = function(){

			TipoMaquinaFactory.get().then(function(resp){
				if(resp.data){
					self.tiposMaquinas = resp.data;
				}
			}).catch(function(erro){
				console.log(erro);
			});

      		ClienteFactory.get().then(function(resp){
  				if(resp.data){
  					self.clientes = resp.data;
  					}
  			}).catch(function(erro){
  				    console.log(erro);
  			});


			if($routeParams.maquinaId){
				MaquinaFactory.get($routeParams.maquinaId)
					.then(function(resp){
						if(resp.data){
							self.maquina = resp.data;
							if (self.maquina.fotofront) {
								self.maquina.fotofront = {
									show:"./maquinas/"+self.maquina.id+"/fotofront/"+self.maquina.fotofront
								}
							}

							if (self.maquina.fotole) {
								self.maquina.fotole = {
									show:"./maquinas/"+self.maquina.id+"/fotole/"+self.maquina.fotole
								}
							}
							if (self.maquina.fotold) {
								self.maquina.fotold = {
									show:"./maquinas/"+self.maquina.id+"/fotold/"+self.maquina.fotold
								}
							}
							if (self.maquina.fotopost) {
								self.maquina.fotopost = {
									show:"./maquinas/"+self.maquina.id+"/fotopost/"+self.maquina.fotopost
								}
							}

						}
					});
			}else{
				self.maquina = {};
			}
		};
		self.salva = function(){
			if(!self.maquina.id){
				save();
			}else{
				update();
			}
		};

		function save(){
			console.log(self.maquina);
			MaquinaFactory.save(self.maquina)
				.then(function(resp){
					if(resp.data){
						//limpa o formulario
						self.maquina = {};
						$location.path('/maquinas');
					}
				});
		}

		function update(){

			MaquinaFactory.update(self.maquina.id, self.maquina)
				.then(function(){
					//limpa o formulario
					self.maquina = {};
					$location.path('/maquinas');
				});
		}

		self.remove = function(cliente){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Maquina?",
				callback: function(confirma){
					if (confirma) {
						MaquinaFactory.remove(cliente.id)
							.then(function(data){
								$location.path('/maquinas');
							});
					}
				}
			});
		};


		self.upload = function(nomeFoto){

			console.log(nomeFoto);
			console.log("SCOPE", $scope);

			var fd = new FormData();
			//front
			if ($scope.fotofront !== undefined){
				angular.forEach($scope.fotofront, function(file){
					console.log("FILE", file);
					fd.append('file',file);
				})
				$scope.fotofront = undefined;
				self.postUpload(fd, nomeFoto);
				$scope.btnFotoFront = true;
			}
			//lado esquerdo
			if ($scope.fotole !== undefined){
				angular.forEach($scope.fotole, function(file){
					console.log(file);
					fd.append('file',file);
				})
				$scope.fotole = undefined;
				self.postUpload(fd, nomeFoto);
				$scope.btnFotoLe = true;
			}
			//lado direito
			if ($scope.fotold !== undefined){
				angular.forEach($scope.fotold, function(file){
					console.log(file);
					fd.append('file',file);
				})
				$scope.fotold = undefined;
				self.postUpload(fd, nomeFoto);
				$scope.btnFotoLd = true;
			}
			//posterior
			if ($scope.fotopost !== undefined){
				angular.forEach($scope.fotopost, function(file){
					console.log(file);
					fd.append('file',file);
				})
				$scope.fotopost = undefined;
				self.postUpload(fd, nomeFoto);
				$scope.btnFotoPost = true;
			}
		}

		self.postUpload = function(fd, nomeFoto){

			$http.post('/upload', fd,{
				transformRequest:angular.identity,
				headers: {'Content-Type':undefined}
			})
			.success(function(data){
			
				switch(nomeFoto){
					case "fotofront":
						self.maquina.fotofront = {
							'path':data.path,
							'nome':data.nome,
							'show':data.path.substring(7,data.path.length)
						};
						break;
					case "fotole":
						self.maquina.fotole = {
							'path':data.path,
							'nome':data.nome,
							'show':data.path.substring(7,data.path.length)
						};
						break;
					case "fotold":
						self.maquina.fotold = {
							'path':data.path,
							'nome':data.nome,
							'show':data.path.substring(7,data.path.length)
						};
						break;
					case "fotopost":
						self.maquina.fotopost = {
							'path':data.path,
							'nome':data.nome,
							'show':data.path.substring(7,data.path.length)
						};
						break;
					default:
						bootbox.alert('Parâmetro errado ao gerar upload. Verifique com o administrador do sistema.');
				}
				$scope.selFotoFront = false;
				$scope.selFotoLe    = false;
				$scope.selFotoLd    = false;
				$scope.selFotoPost  = false;

			})
			.error(function(error){
				bootbox.alert('Erro ao fazer upload!!!');
			})
		};


		//inicia o controller
		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaMaquinaController', Controller);

	Controller.$inject=['MaquinaFactory'];

	function Controller(MaquinaFactory){

		var self = this;

		self.maquinas = [];

		self.filtro = '';

		self.init = function(){
			buscaMaquinas();
		};

		function buscaMaquinas(){
			MaquinaFactory.get().then(function(resp){
				if(resp.data){
					self.maquinas = resp.data;
				}
			});
		}

		self.remove = function(cliente){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa máquina?",
				callback: function(confirma){
					if (confirma) {
						MaquinaFactory.remove(cliente.id)
							.then(function(data){
								buscaMaquinas();
							});
					}
				}
			});
		};

		self.init();
	}
})();

(function(){
	'use strict';

	angular.module('myApp').controller('formNormaRegController', Controller);

	Controller.$inject=['$routeParams', '$resource', '$location', 'NormaRegFactory'];

	function Controller($routeParams, $resource, $location, NormaRegFactory){

		var self = this;

		self.init = function(){

				if($routeParams.itemId){
					NormaRegFactory.get($routeParams.itemId)
					.then(function(resp){
						if(resp.data){
							self.item = resp.data;
						}
					});
			}else{
				self.item = {};
			}
		};

			self.salva = function(){
				if(!self.item.id){
					save();
				}else{
					update();
				}
			};

			function save(){
				NormaRegFactory.save(self.item)
				.then(function(resp){
					if(resp.data){

						self.item = {};
						$location.path('/itens');
					}
				});
			}

			function update(){
				NormaRegFactory.update(self.item.id, self.item)
				.then(function(){
					self.item = {};
					$location.path('/itens');
				});
			}

			self.remove = function(item){
				bootbox.confirm({
					size: 'small',
					message: "Deseja deletar esse Item ?",
					callback: function(confirma){
						if (confirma) {
							NormaRegFactory.remove(item.id)
								.then(function(data){
									$location.path('/itens');
							});
						}
					}
				});
			};
			self.init();
		}
	})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaNormaRegController', Controller);

	Controller.$inject=['NormaRegFactory'];

	function Controller(NormaRegFactory){

		var self = this;

		self.itens = [];

		self.filtro = '';

		self.init = function(){
			buscaNormaReg();
		};

		function buscaNormaReg(){
			NormaRegFactory.get().then(function(resp){
				if(resp.data){
					self.itens = resp.data;
				}
			});
	}
	self.remove = function(item){
		bootbox.confirm({
			size: 'small',
			message: "Deseja deletar este item da norma?",
			callback: function(confirma){
				if(confirma){
					NormaRegFactory.remove(item.id)
					.then(function(data){
						buscaNormaReg();
					});
				}
			}
		});
	};
	self.init();
}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formPerigoController', Controller);

	Controller.$inject=['$routeParams', 'PerigoFactory', 'RiscoFactory', '$location'];

	function Controller($routeParams, PerigoFactory, RiscoFactory, $location){

		var self = this;
		self.riscoSelecionado ="";
		self.btnIncluirRisco = true;
		//self.perigo = {Riscos:[]};
		self.perigo = {};
		self.riscosDisponiveis = []; //Riscos Disponíveis no option
		self.riscosInseridos = []; //Riscos inseridos na table

    	self.changeRisco = function(){

			self.btnIncluirRisco = self.riscoSelecionado ? false : true;
		}

		self.init = function(){
			RiscoFactory.get().then(function(resp){
				if(resp.data){
					self.riscosDisponiveis = resp.data;
				}
			}).catch(function(erro){
				console.log(erro);
			});

			if($routeParams.perigoId){
				PerigoFactory.get($routeParams.perigoId)
					.then(function(resp){
						if(resp.data){
							console.log(resp.data);
							self.perigo = resp.data;
							for (var i = 0; i < resp.data.Riscos.length; i++){
								self.riscosInseridos.push({
									"id": resp.data.Riscos[i].id,
									"nome": resp.data.Riscos[i].nome,
									"descricao": resp.data.Riscos[i].descricao
								});
							}

							self.perigo.Riscos = self.riscosInseridos;
							for (var i = 0; i < self.riscosInseridos.length; i++){
								for (var y = 0; y < self.riscosDisponiveis.length; y++){
									if (self.riscosInseridos[i].id == self.riscosDisponiveis[y].id){
										self.riscosDisponiveis.splice(y,1);
									}
								}
							}
						}
					}).catch(function(erro){
						console.log(erro);
					}
				);
			}else{
				self.perigo = {};
			}
		};

		self.adicionaRisco = function() {
			for (var i = 0; i < self.riscosDisponiveis.length; i++){
				if (self.riscosDisponiveis[i].id == self.riscoSelecionado.id) {
					self.riscosDisponiveis.splice(i,1);
				}
			};
			self.riscosInseridos.push(self.riscoSelecionado);
			self.btnIncluirRisco = true;
			self.perigo.Riscos = self.riscosInseridos;
		};

		self.removeRiscoInserido = function(risco){
			for (var i = 0; i < self.riscosInseridos.length; i++) {
				if (self.riscosInseridos[i].id == risco.id) {
					self.riscosInseridos.splice(i,1);
					self.riscosDisponiveis.push(risco);
				}
			};
		};

		self.salva = function(){
			if(!self.perigo.id){
				save();
			}else{
				update();
			}
		};

		function save(){

			PerigoFactory.save(self.perigo)
				.then(function(resp){
				if(resp.data){
					$location.path('/perigos');
				}
			}).catch(function(erro){
				console.log(erro);
			});
		};

		function update(){

			PerigoFactory.update(self.perigo.id, self.perigo)
				.then(function(){

				$location.path('/perigos');
			}).catch(function(erro){
				console.log(erro);
			})
		};

		self.remove = function(perigo){
			bootbox.confirm({
				size : 'small',
				message : "Deseja deletar esse Perigo?",
				callback : function(confirma){
					if(confirma){
						PerigoFactory.remove(perigo.id)
							.then(function(data){
								$location.path('/perigos');
						}).catch(function(erro){
							console.log(erro);
						});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaPerigoController', Controller);
	
	Controller.$inject=['PerigoFactory'];
	
	function Controller(PerigoFactory){

		var self = this;
		self.perigos = [];
		self.filtro = '';
		
		self.init = function(){
			buscaPerigos();
		};

		function buscaPerigos(){
			PerigoFactory.get().then(function(resp){
				if (resp.data){
					self.perigos = resp.data;
				}
			});
		}

		self.remove = function(perigo){

			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Perigo?",
				callback: function(confirma){
					if (confirma) {
						PerigoFactory.remove(perigo.id)
							.then(function(data){
								buscaPerigos();
							
							}).catch(function(erro){
								console.log(erro);
							}
						);
					}
				}
			});
		};

		self.init();
	};
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formNormaTecnicaController', Controller);

	Controller.$inject=['$routeParams', '$location', 'NormaTecnicaFactory'];

	function Controller($routeParams, $location, NormaTecnicaFactory){
		var self = this;

		self.init = function(){
			if($routeParams.normaTecnicaId){
				NormaTecnicaFactory.get($routeParams.normaTecnicaId)
				.then(function(resp){
					if(resp.data){
						self.normaTecnica = resp.data;
					}
				});
			}else{
				self.normaTecnica = {};
			}
		};
		self.salva = function(){
			if(!self.normaTecnica.id){
				save();
			}else{
					update();
			}
		};

		self.mensagem = {texto: ''};



		function save(){
			NormaTecnicaFactory.save(self.normaTecnica)
			.then(function(resp){
				if(resp.data){
					self.normaTecnica = {};
					$location.path('/normasTecnicas');
				}
			}).catch(function(erro){
					 console.log(erro);
					 function retornaMsg(data){
					 	var msg = "";
					 	for(var err in data.errors){
					 		msg +=data.errors[err].message;
					 	}
					 	return msg;
					 }
					self.mensage = {
						texto:  retornaMsg(erro.data)
					};
				});
	  	}

		function update(){
			var _id = self.normaTecnica.id;
			console.log(self.normaTecnica);
			NormaTecnicaFactory.update(_id, self.normaTecnica)
			.then(function(){
				self.mensagem = {texto: 'salvo com sucesso'};
				$location.path('/normasTecnicas');
			}).catch(function(erro){
					console.log(erro);
				});;
		}

		self.remove = function(normaTecnica){
			bootbox.confirm({
				size: 'small',
				message: 'Deseja excluit esta norma técnica',
				callback: function(confirma){
					if(confirma){
          		NormaTecnicaFactory.remove(self.normaTecnica.id)
						.then(function(data){
							$location.path('/normasTecnicas')
						});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaNormaTecnicaController', Controller);

	Controller.$inject=['NormaTecnicaFactory'];

	function Controller(NormaTecnicaFactory){

		var self = this;

		self.normasTecnicas = [];

		self.filtro = '';

		self.init = function(){
			buscaNormasTecnicas();
		};

		function buscaNormasTecnicas(){
			NormaTecnicaFactory.get().then(function(resp){
				if(resp.data){
					self.normasTecnicas = resp.data;
				}
			});
		}
		self.remove = function(normaTecnica){
				bootbox.confirm({
				size: 'small',
				message: 'Deseja deletar essa norma técnica?',
				callback: function(confirma){
					if(confirma){
						NormaTecnicaFactory.remove(normaTecnica.id)
						.then(function(data){
							buscaNormasTecnicas();
						});
					}
				}
			});
		};
			self.init();
		}
	})();

(function() {
	'use strict';

	angular.module('myApp').controller('formRespTecnicaController', Controller);

	Controller.$inject=['$routeParams', '$location', 'RespTecnicaFactory'];

	function Controller($routeParams, $location, RespTecnicaFactory){

  var self = this;

	self.init = function(){
		RespTecnicaFactory.get().then(function(resp){
			if(resp.data){
				self.respTecnica = resp.data;
			}
		});
	};

	self.altera = function(){
		update();
	};

	function update(){
		RespTecnicaFactory.update(self.respTecnica)
		.then(function(){
			$location.path('/respTecnicas');
		});
	};
 self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaRespTecnicaController', Controller);

	Controller.$inject=['RespTecnicaFactory'];

	function Controller(RespTecnicaFactory){

	self = this;

	self.respTecnica = [];

	self.filtro = '';

	self.init = function(){
		buscaRespTecnica();
	};
		function buscaRespTecnica(){
			RespTecnicaFactory.get().then(function(resp){
				if(resp.data){
					console.log(resp.data);
					self.respTecnica = resp.data;
				}
			});
		};
			self.init();
	}
})();

(function(){
	'use strict';
	
	angular.module('myApp').controller('formRiscoController', Controller);
	
	Controller.$inject=['$routeParams', 'RiscoFactory', '$location'];
	
	function Controller($routeParams, RiscoFactory, $location){

		var self = this;
		
		self.init = function(){
			if($routeParams.riscoId){
				RiscoFactory.get($routeParams.riscoId)
					.then(function(resp){
						if(resp.data){
							self.risco = resp.data;
						}
					})
					.catch(function(erro){
						
					}
				);
			}else{
				self.risco = {};
			}
		};
		
		self.salva = function(){
			if(!self.risco.id){
				save();
			}else{
				update();
			}
		};
		
		function save(){
			RiscoFactory.save(self.risco)
				.then(function(resp){
				if(resp.data){
					$location.path('/riscos');
				}
			})
			.catch(function(erro){
				console.log(erro);
			});
		};
		
		function update(){
			RiscoFactory.update(self.risco.id, self.risco)
				.then(function(){
				$location.path('/riscos');
			})
			.catch(function(erro){
				console.log(erro);
			})
		}
		
		self.remove = function(risco){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Risco?",
				callback: function(confirma){
					if (confirma) {
						RiscoFactory.remove(risco.id)
							.then(function(data){
								$location.path('/riscos');
							
							}).catch(function(erro){
								console.log(erro);
							}
						);
					}
				}
			});
		};
		
		self.init();
	}
})();

(function(){
	'use strict';
	
	angular.module('myApp').controller('listaRiscoController', Controller);
	
	Controller.$inject=['RiscoFactory'];
	
	function Controller(RiscoFactory){ 

		var self = this;
		
		self.riscos = [];

		self.filtro = '';
		
		self.init = function(){
			buscaRiscos();	
		};	

		function buscaRiscos(){
			RiscoFactory.get().then(function(resp){
				if(resp.data){
					self.riscos = resp.data;
				}
			});	
		}
	
		self.remove = function(risco){

			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse Risco?",
				callback: function(confirma){
					if (confirma) {
						RiscoFactory.remove(risco.id)
							.then(function(data){
								buscaRiscos();
							
							}).catch(function(erro){
								console.log(erro);
							}
						);
					}
				}
			});
		};

		self.init();
	};
})();
	
(function(){
	'use strict';
	
	angular.module('myApp').controller('formSistemaSegurancaController', Controller);
	
	Controller.$inject=['$routeParams', 'SistemaSegurancaFactory', '$location'];
	
	function Controller($routeParams, SistemaSegurancaFactory, $location){

		var self = this;
		
		self.init = function(){
			if($routeParams.sistemaSegurancaId){
				SistemaSegurancaFactory.get($routeParams.sistemaSegurancaId)
					.then(function(resp){
						if(resp.data){
							self.sistemaSeguranca = resp.data;
						}
					})
					.catch(function(erro){
						
					}
				);
			}else{
				self.sistemaSeguranca = {};
			}
		};
		
		self.salva = function(){
			if(!self.sistemaSeguranca.id){
				save();
			}else{
				update();
			}
		};
		
		function save(){
			SistemaSegurancaFactory.save(self.sistemaSeguranca)
				.then(function(resp){
				if(resp.data){
					$location.path('/sistemasSeguranca');
				}
			})
			.catch(function(erro){
				console.log(erro);
			});
		};
		
		function update(){
			SistemaSegurancaFactory.update(self.sistemaSeguranca.id, self.sistemaSeguranca)
				.then(function(){
				$location.path('/sistemasSeguranca');
			})
			.catch(function(erro){
				console.log(erro);
			})
		}
		
		self.remove = function(sistemaSeguranca){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse sistema de segurança?",
				callback: function(confirma){
					if (confirma) {
						SistemaSegurancaFactory.remove(sistemaSeguranca.id)
							.then(function(data){
								$location.path('/sistemasSeguranca');
							
							}).catch(function(erro){
								console.log(erro);
							}
						);
					}
				}
			});
		};
		
		self.init();
	}
})();

(function(){
	'use strict';
	
	angular.module('myApp').controller('listaSistemaSegurancaController', Controller);
	
	Controller.$inject=['SistemaSegurancaFactory'];
	
	function Controller(SistemaSegurancaFactory){ 

		var self = this;
		
		self.sistemasSeguranca = [];

		self.filtro = '';
		
		self.init = function(){
			buscaSistemasSeguranca();	
		};	

		function buscaSistemasSeguranca(){
			SistemaSegurancaFactory.get().then(function(resp){
				if(resp.data){
					self.sistemasSeguranca = resp.data;
				}
			});	
		}
	
		self.remove = function(sistemaSeguranca){

			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse sistema de segurança?",
				callback: function(confirma){
					if (confirma) {
						SistemaSegurancaFactory.remove(sistemaSeguranca.id)
							.then(function(data){
								buscaSistemasSeguranca();
							
							}).catch(function(erro){
								console.log(erro);
							}
						);
					}
				}
			});
		};

		self.init();
	};
})();
	
(function() {
	'use strict';

	angular.module('myApp').controller('formPerguntaController', Controller);

	Controller.$inject = ['$routeParams', '$location', 'TipoDispositivoFactory', 'PerguntaFactory', 'RespostaFactory'];

	function Controller($routeParams, $location, TipoDispositivoFactory, PerguntaFactory, RespostaFactory){

		var self = this;

		self.init = function(){

			// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da capacitacao
			buscaTipoDispositivo();

			// Atualiza a lista de respostas
			buscaRespostas();

			// Busca a pergunta
			buscaPergunta();
		};

		// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da capacitacao
		function buscaTipoDispositivo(){
			if($routeParams.tipoDispositivoId){
				TipoDispositivoFactory.get($routeParams.tipoDispositivoId).then(function(resp){
					if(resp.data){
						self.tipoDispositivo = resp.data;
					}
				});
			}else{
				self.tipoDispositivo = {};
			}

		}

		// Busca a lista de respostas
		function buscaRespostas(){
			RespostaFactory.get().then(function(resp){
				if(resp.data){
					self.respostas = resp.data;
				}
			}).catch(function(erro){
				console.log(erro);
			});
		}

		function buscaPergunta(){
			console.log("function buscaPergunta");
			if($routeParams.perguntaId){
				PerguntaFactory.get($routeParams.perguntaId).then(function(resp){
					if(resp.data){
						self.pergunta = resp.data;
					}
				});
			}else{
				self.pergunta = {
					tipoDispositivoId : $routeParams.tipoDispositivoId
				};
			}
		}

		self.salva = function(){
			if(!self.pergunta.id){
				save();
			}else{
				update();
			}
		};

		function save(){
			PerguntaFactory.save(self.pergunta).then(function(resp){
				if(resp.data){
					//limpa o formulario
					self.pergunta = {};
					$location.path('/tipoDispositivo/'+$routeParams.tipoDispositivoId+'/perguntas');
				}
			});
		}

		function update(){
			PerguntaFactory.update(self.pergunta.id, self.pergunta).then(function(){
				//limpa o formulario
				self.pergunta = {};
				$location.path('/tipoDispositivo/'+$routeParams.tipoDispositivoId+'/perguntas');
			});
		}

		

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formTipoDispositivoController', Controller);

	Controller.$inject = ['$routeParams', '$location', 'TipoDispositivoFactory'];

	function Controller($routeParams, $location, TipoDispositivoFactory){

		var self = this;

		self.init = function(){
			busca();			
		};

		function busca(){
			// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da tipoDispositivo
			if($routeParams.tipoDispositivoId){
				TipoDispositivoFactory.get($routeParams.tipoDispositivoId).then(function(resp){
					if(resp.data){
						self.tipoDispositivo = resp.data;
					}
				});
			}else{
				self.tipoDispositivo = {};
			}
		}

		self.salva = function(){
			if(!self.tipoDispositivo.id){
				save();
			}else{
				update();
			}
		};

		function save(){
			TipoDispositivoFactory.save(self.tipoDispositivo).then(function(resp){
				if(resp.data){
					console.log(resp.data);
					//limpa o formulario
					self.tipoDispositivo = {};
					$location.path('/tipoDispositivo/'+resp.data.id+'/perguntas');
				}
			});
		}

		function update(){
			TipoDispositivoFactory.update(self.tipoDispositivo.id, self.tipoDispositivo).then(function(){
				//limpa o formulario
				self.tipoDispositivo = {};
				$location.path('/tiposDispositivos');
			});
		}

		self.remove = function(tipoDispositivo){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Tipo Dispositivo?",
				callback: function(confirma){
					if (confirma) {
						TipoDispositivoFactory.remove(tipoDispositivo.id).then(function(data){
							$location.path('/tiposDispositivos');
						});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaQuestionarioController', Controller);

	Controller.$inject=['$routeParams', '$location', 'TipoDispositivoFactory', 'PerguntaFactory'];

	function Controller($routeParams, $location, TipoDispositivoFactory, PerguntaFactory){

		var self = this;

		self.filtro = '';

		self.perguntas = [];

		console.log($routeParams.tipoDispositivoId);

		self.tipoDispositivoId = $routeParams.tipoDispositivoId;

		self.init = function(){
			buscaTipoDispositivo();
		};


		function buscaTipoDispositivo(){
			// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da capacitacao
			if($routeParams.tipoDispositivoId){
				//debugger;
				TipoDispositivoFactory.get($routeParams.tipoDispositivoId).then(function(resp){
					if(resp.data){
						self.tipoDispositivo = resp.data;
						//console.log(self.tipoDispositivo);
						self.perguntas = resp.data.perguntas;
					}
				});
			}else{
				self.perguntas = [];
			}
		};


		self.remove = function(pergunta){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Pergunta ?",
				callback: function(confirma){
					if (confirma) {
						PerguntaFactory.remove(pergunta.id).then(function(data){
							buscaTipoDispositivo();
						});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaTipoDispositivoController', Controller);

	Controller.$inject=['TipoDispositivoFactory', '$rootScope'];

	function Controller(TipoDispositivoFactory, $rootScope){

		var self = this;

		self.filtro = '';

		self.tiposDispositivos = [];

		self.init = function(){
			buscaTiposDispositivos();
			console.log($rootScope);
		};

		function buscaTiposDispositivos(){
			TipoDispositivoFactory.get().then(function(resp){
				if(resp.data){
					self.tiposDispositivos = resp.data;
				}
			});
		}

		self.remove = function(tipoDispositivo){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse tipo de dispositivo e seu questionário?",
				callback: function(confirma){
					if (confirma) {
						TipoDispositivoFactory.remove(tipoDispositivo.id).then(function(data){
							buscaTiposDispositivos();
						});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formTipoMaquinaController', Controller);

	Controller.$inject=['$routeParams', '$resource', '$location', 'TipoMaquinaFactory', 'CapacitacaoFactory'];

	function Controller($routeParams, $resource, $location, TipoMaquinaFactory, CapacitacaoFactory){

		var self = this;
		self.capacitacaoSelecionada ="";
		self.capacitacoesDisponiveis = [];
		self.init = function(){

			CapacitacaoFactory.get().then(function(resp){
				if(resp.data){
					self.capacitacoesDisponiveis = resp.data;
				}
			}).catch(function(erro){

			})

			if($routeParams.tipoMaquinaId){
				TipoMaquinaFactory.get($routeParams.tipoMaquinaId)
				.then(function(resp){
					if(resp.data){
							self.tipoMaquina = resp.data;
							console.log(self.tipoMaquina);
					}
				})
				.catch(function(erro){
					self.mensagem = {
						text: 'Este tipo de máquina não existe. Novo tipo de márquina será incluido'
					};
				}
			);
			}else{
				self.tipoMaquina = {};
			}
		};

		self.mensagem = {texto: ''};

		self.salva = function(){
			if(!self.tipoMaquina.id){
		  	save();
			}else{
				update();
			}
		};

		function save(){
			TipoMaquinaFactory.save(self.tipoMaquina)
			.then(function(resp){
				  if(resp.data){

					self.tipoMaquina = {};
					$location.path('/tiposMaquinas');
				}
			})
			.catch(function(erro){
				 console.log(erro);
				 function retornaMsg(data){
				 	var msg = "";
				 	for(var err in data.errors){
				 		msg +=data.errors[err].message;
				 	}
				 	return msg;
				 }
				self.mensage = {
					texto:  retornaMsg(erro.data)
				};
			});

		}

		self.remove = function(tipoMaquina){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Capacitação ?",
				callback: function(confirma){
					if (confirma) {
						TipoMaquinaFactory.remove(self.tipoMaquina.id)

							.then(function(data){
								$location.path('/tiposMaquinas');
						});
					}
				}
			});
		};

		function update(){


			TipoMaquinaFactory.update(self.tipoMaquina.id, self.tipoMaquina)
			.then(function(){

				self.tipoMaquina = {};
				$location.path('/tiposMaquinas');
			})
			.catch(function(erro){
				console.log(erro);
			});
		}


		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaTipoMaquinaController', Controller);

	Controller.$inject=['TipoMaquinaFactory'];

	function Controller(TipoMaquinaFactory){

		var self = this;

		self.tiposMaquinas = [];

		self.filtro = '';

		self.init = function(){
			buscaTipoMaquina();
		};

		function buscaTipoMaquina(){
			TipoMaquinaFactory.get().then(function(resp){

				if(resp.data){
					self.tiposMaquinas = resp.data;
					//console.log(self.tiposMaquinas);
				}
			});
		}
		self.remove = function(tipoMaquina){
		  bootbox.confirm({
			  size: 'small',
			  message: "Deseja deletar este limite de maquina ?",
			  callback: function(confirma){
					if (confirma){
							TipoMaquinaFactory.remove(tipoMaquina.id)
							.then(function(data){
								buscaTipoMaquina();
							});
						}
				 }
 			});
		};

		self.init();
	}
})();


//////////////


(function() {
	'use strict';

	angular.module('myApp').controller('formLimiteMaquinaController', Controller);

	Controller.$inject=['$routeParams', '$resource', '$location', 'LimiteMaquinaFactory'];

	function Controller($routeParams, $resource, $location, LimiteMaquinaFactory){

		var self = this;
		self.init = function(){

			if($routeParams.limiteMaquinaId){
				LimiteMaquinaFactory.get($routeParams.limiteMaquinaId)
				.then(function(resp){
					if(resp.data){
							self.limiteMaquina = resp.data;
							console.log(self.limiteMaquina);
					}
				})
				.catch(function(erro){
					self.mensagem = {
						text: 'Este limite de máquina não existe. Novo limite de máquina será incluido'
					};
				}
			);
			}else{
				self.limiteMaquina = {};
			}
		};

		self.mensagem = {texto: ''};

		self.salva = function(){
			if(!self.limiteMaquina.id){
		  	save();
			}else{
				update();
			}
		};

		function save(){
			LimiteMaquinaFactory.save(self.limiteMaquina)
			.then(function(resp){
				  if(resp.data){

					self.limiteMaquina = {};
					$location.path('/limitesMaquinas');
				}
			})
			.catch(function(erro){
				 console.log(erro);
				 function retornaMsg(data){
				 	var msg = "";
				 	for(var err in data.errors){
				 		msg +=data.errors[err].message;
				 	}
				 	return msg;
				 }
				self.mensage = {
					texto:  retornaMsg(erro.data)
				};
			});

		}

		self.remove = function(limiteMaquina){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar esse limite de máquina?",
				callback: function(confirma){
					if (confirma) {
						LimiteMaquinaFactory.remove(self.limiteMaquina.id)

							.then(function(data){
								$location.path('/limitesMaquinas');
						});
					}
				}
			});
		};

		function update(){


			LimiteMaquinaFactory.update(self.limiteMaquina.id, self.limiteMaquina)
			.then(function(){

				self.limiteMaquina = {};
				$location.path('/limitesMaquinas');
			})
			.catch(function(erro){
				console.log(erro);
			});
		}


		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaLimiteMaquinaController', Controller);

	Controller.$inject=['LimiteMaquinaFactory'];

	function Controller(LimiteMaquinaFactory){

		var self = this;

		self.limitesMaquinas = [];

		self.filtro = '';

		self.init = function(){
			buscaLimiteMaquina();
		};

		function buscaLimiteMaquina(){
			LimiteMaquinaFactory.get().then(function(resp){

				if(resp.data){
					self.limitesMaquinas = resp.data;
					//console.log(self.tiposMaquinas);
				}
			});
		}
		self.remove = function(limiteMaquina){
		  bootbox.confirm({
			  size: 'small',
			  message: "Deseja deletar este limite de maquina ?",
			  callback: function(confirma){
					if (confirma){
							LimiteMaquinaFactory.remove(limiteMaquina.id)
							.then(function(data){
								buscaLimiteMaquina();
							});
						}
				 }
 			});
		};

		self.init();
	}
})();



/////////////

(function() {
	'use strict';

	angular.module('myApp').controller('formPortariaController', Controller);

	Controller.$inject=['$routeParams', '$location', 'PortariaFactory'];

	function Controller($routeParams, $location, PortariaFactory){

	 var self = this;

	 self.init = function(){
		 PortariaFactory.get()
		 .then(function(resp){
			 if(resp.data){
				 self.portaria = resp.data;
			 }
		 });
	 };

self.altera = function(){
	update();
};
	 function update(){
 		PortariaFactory.update(self.portaria)
		.then(function(){
		$location.path('/portarias');
		});
 	};
	 self.init();
 }
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaPortariaController', Controller);

	Controller.$inject=['PortariaFactory'];

	function Controller(PortariaFactory){

		var self = this;

		self.portarias = [];

		self.filtro = '';

		self.init = function(){
			buscaPortaria();
		};

		function buscaPortaria(){
			PortariaFactory.get().then(function(resp){
				if(resp.data){
					self.portaria = resp.data;
				}
			});
		};
		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('formUsuarioController', Controller);

	Controller.$inject=['$routeParams', '$location', 'UsuarioFactory'];

	function Controller($routeParams, $location, UsuarioFactory){

		var self = this;

		self.init = function(){
			// Verifica se a requisição contem ID, caso tenha, faz requisição dos dados da usuario
			if($routeParams.usuarioId){
				UsuarioFactory.get($routeParams.usuarioId)
					.then(function(resp){
						if(resp.data){
							self.usuario = resp.data;
						}
					});
			}else{
				self.usuario = {};
			}
		};

		self.salva = function(){
			if(!self.usuario.id){
				save();
			}else{
				update();
			}
		};

		function save(){
			UsuarioFactory.save(self.usuario)
				.then(function(resp){
					if(resp.data){
						//limpa o formulario
						self.usuario = {};
						$location.path('/usuarios');
					}
				});
		}

		function update(){
			UsuarioFactory.update(self.usuario.id, self.usuario)
				.then(function(){
					//limpa o formulario
					self.usuario = {};
					$location.path('/usuarios');
				});
		}

		self.remove = function(usuario){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Usuário?",
				callback: function(confirma){
					if (confirma) {
						UsuarioFactory.remove(usuario.id)
							.then(function(data){
								$location.path('/usuarios');
							});
					}
				}
			});
		};

		self.init();
	}
})();

(function() {
	'use strict';

	angular.module('myApp').controller('listaUsuarioController', Controller);

	Controller.$inject=['UsuarioFactory'];

	function Controller(UsuarioFactory){

		var self = this;

		self.usuarios = [];

		self.filtro = '';

		self.init = function(){
			buscaUsuarios();
		};

		function buscaUsuarios(){
			UsuarioFactory.get().then(function(resp){
				if(resp.data){
					self.usuarios = resp.data;
				}
			});
		}

		self.remove = function(usuario){
			bootbox.confirm({
				size: 'small',
				message: "Deseja deletar essa Usuário?",
				callback: function(confirma){
					if (confirma) {
						UsuarioFactory.remove(usuario.id)
							.then(function(data){
								buscaUsuarios();
							});
					}
				}
			});
		};

		self.init();
	}
})();
(function() {
	'use strict';

	angular.module('myApp').controller('passwordController', Controller);

	Controller.$inject=['$routeParams', '$location', 'UsuarioFactory', 'AuthService', '$base64', 'toaster'];

	function Controller($routeParams, $location, UsuarioFactory, AuthService, $base64, toaster){

		var self = this;

		self.init = function(){

		};

		self.salva = save;

		function save(){
			 if(self.novaSenha == self.confSenha){
				 var formData = {
	 				'senhaAtual': $base64.encode(self.senhaAtual),
	 				'novaSenha': $base64.encode(self.novaSenha)
	 			}
	 			

	 			AuthService.password(formData, function(){
	 				$location.path('/');
	 			});
			 }
			  if(self.novaSenha != self.confSenha){
					toaster.pop('error', "Info", "Senhas não conferem");
				}


		}

		self.init();
	}
})();
